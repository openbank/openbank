// +gunk openapiv2.Swagger{
//         Swagger: "2.0",
//         Info: openapiv2.Info{
//                 Title:       "FX API",
//                 Description: "Provides create and read operations on the foreign exchange resource.",
//                 Version:     "1.0.0",
//         },
//         Schemes: []openapiv2.SwaggerScheme{
//                 openapiv2.HTTPS,
//         },
//         Consumes: []string{
//                 "application/json",
//         },
//         Produces: []string{
//                 "application/json",
//         },
//         Responses: map[string]openapiv2.Response{
//                 "400": openapiv2.Response{
//                         Description: "Returned when the request body is malformatted or does not match the expected request.",
//                 },
//                 "401": openapiv2.Response{
//                         Description: "Returned when the request does not contains the user's credentials.",
//                 },
//                 "403": openapiv2.Response{
//                         Description: "Returned when the user does not have permission to access the resource.",
//                 },
//                 "404": openapiv2.Response{
//                         Description: "Returned when the resource is not found.",
//                 },
//                 "500": openapiv2.Response{
//                         Description: "Returned when an unexpected error occured on the server side.",
//                 },
//         },
//         SecurityDefinitions: openapiv2.SecurityDefinitions{
//                 Security: map[string]openapiv2.SecurityScheme{
//                         "OAuth2": openapiv2.SecurityScheme{
//                                 Type:             openapiv2.TYPE_OAUTH2,
//                                 Flow:             openapiv2.FLOW_ACCESS_CODE,
//                                 Description:      "Access to fx resources is restricted to authenticated users. The authentication process follows the Authorization Code flow.",
//                                 AuthorizationURL: "/v1/auth",
//                                 TokenURL:         "/v1/token",
//                                 Scopes: openapiv2.Scopes{
//                                         Scope: map[string]string{
//                                                 "https://auth.bnk.to/fx.read":  "View fx data",
//                                                 "https://auth.bnk.to/fx.write": "Manage fx data",
//                                         },
//                                 },
//                         },
//                 },
//         },
// }
package fx

import (
	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"

	types "github.com/openbank/openbank/v1/types"
)

// FX holds all the details about a foreign exchange object.
type FX struct {
	// BankID is an identifier for the bank on this fx transaction.
	BankID string `pb:"1" json:"bank_id"`

	// FromCurrencyCode is the currency to transfer from.
	FromCurrencyCode string `pb:"2" json:"from_currency_code"`

	// ToCurrencyCode is the currency that we are transferring to.
	ToCurrencyCode string `pb:"3" json:"to_currency_code"`

	// Rate is the exchange rate of the foreign exchange.
	Rate string `pb:"4" json:"rate"`

	// InverseRate is the inverse of the exchange rate of the foreign exchange.
	InverseRate string `pb:"5" json:"inverse_rate"`

	// EffectiveDate is the effective date of the foreign exchange quote.
	EffectiveDate string `pb:"6" json:"effective_date"`
}

// CreateFXRequest is a request envelope to create a foreign exchange quote.
type CreateFXRequest struct {
	// FX is the foreign exchange information to create.
	FX FX `pb:"1" json:"fx"`
}

// UpdateFXRequest is a request envelope to update a foreign exchange quote.
type UpdateFXRequest struct {
	// FX is the foreign exchange information to update.
	FX FX `pb:"1" json:"fx"`
}

// GetCurrentFXRateRequest is a request envelope to get a foreign exchange rate.
type GetCurrentFXRateRequest struct {
	// FromCurrencyCode is the currency to transfer from.
	FromCurrencyCode string `pb:"1" json:"from_currency_code"`

	// ToCurrencyCode is the currency that we are transferring to.
	ToCurrencyCode string `pb:"2" json:"to_currency_code"`
}

// FXService provides branch-related operations.
type FXService interface {
	// GetCurrentFXRate retrieves the current foreign exchange rate of the two
	// specified currency code.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/fx/{FromCurrencyCode}/{ToCurrencyCode}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"FX"},
	//         Description: "Retrieve the exchange rate from a currency to another",
	//         Summary:     "Retrieve exchange rate between two currencies",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/fxFX",
	//                                 },
	//                         },
	//                 },
	//                 "404": openapiv2.Response{
	//                         Description: "Returned when the resource is not found.",
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/fx.read",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	GetCurrentFXRate(GetCurrentFXRateRequest) FX

	// CreateFX creates a new foreign exchange quote.
	//
	// +gunk http.Match{
	//         Method: "POST",
	//         Path:   "/v1/fx",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"FX"},
	//         Description: "Creates a new foreign exchange quote and returns it.",
	//         Summary:     "Create a foreign exchange quote",
	//         Responses: map[string]openapiv2.Response{
	//                 "201": openapiv2.Response{
	//                         Description: "Foreign Exchange created successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/fxFX",
	//                                 },
	//                         },
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/fx.write",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	CreateFX(CreateFXRequest) FX

	// UpdateFX updates a foreign exchange quote.
	//
	// +gunk http.Match{
	//         Method: "PUT",
	//         Path:   "/v1/fx",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"FX"},
	//         Description: "Updates a foreign exchange quote",
	//         Summary:     "Update a foreign exchange quote",
	//         Responses: map[string]openapiv2.Response{
	//                 "204": openapiv2.Response{
	//                         Description: "Foreign Exchange successfully updated.",
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/fx.write",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	UpdateFX(UpdateFXRequest)
}
