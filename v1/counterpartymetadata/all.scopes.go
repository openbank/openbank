// Code generated by "scopegen"; DO NOT EDIT.
package counterpartymetadata

type ServiceScope struct{}

var Scopes = map[string]string{
	"https://auth.bnk.to/counterpartymetadata.read": "View counterpartymetadata data",
	"https://auth.bnk.to/counterpartymetadata.write": "Manage counterpartymetadata data",
}

var AuthScopes = map[string][]string{
	"/counterpartymetadata.CounterpartyMetadataService/CreateCorporateLocation": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreateImageURL": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreateMoreInfo": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreateOpenCorporatesURL": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreatePhysicalLocation": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreatePrivateAlias": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreatePublicAlias": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreateURL": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeleteCorporateLocation": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeleteImageURL": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeleteMoreInfo": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeleteOpenCorporatesURL": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeletePhysicalLocation": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeletePrivateAlias": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeletePublicAlias": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeleteURL": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/GetCorporateLocation": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetCorporateLocations": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetImageURL": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetImageURLs": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetMoreInfo": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetMoreInfos": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetOpenCorporatesURL": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetOpenCorporatesURLs": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetOtherAccountMetadata": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetPhysicalLocation": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetPhysicalLocations": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetPrivateAlias": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetPrivateAliases": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetPublicAlias": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetPublicAliases": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetURL": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetURLs": []string{"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdateCorporateLocation": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdateImageURL": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdateMoreInfo": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdateOpenCorporatesURL": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdatePhysicalLocation": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdatePrivateAlias": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdatePublicAlias": []string{"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdateURL": []string{"https://auth.bnk.to/counterpartymetadata.write"},
}

// Any allows a loose challenge, for claims containing any of the method scopes.
//
// Use All method as a default for OAuth2 style scopes.  Any is useful with more complex scope definitions.
func (svcSc *ServiceScope) Any(method string, claims []string) bool {
	ch := AuthScopes[method]
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				return true
			}
		}
	}
	return len(ch) == 0
}

// All is the default OAuth2 challenge method, ensuring claims contains all method scopes.
func (svcSc *ServiceScope) All(method string, claims []string) bool {
	ch := AuthScopes[method]
	if len(ch) > len(claims) {
		return false
	}
scopes:
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				continue scopes
			}
		}
		return false
	}
	return true
}
