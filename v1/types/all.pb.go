// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/openbank/openbank/v1/types/all.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// MajorType describes the type of the account.
type MajorType int32

const (
	MajorType_UnknownMajorType MajorType = 0
	// MajorType_Checking account.
	MajorType_Checking MajorType = 1
	// MajorType_Saving account.
	MajorType_Saving MajorType = 2
	// MajorType_TimeDeposit for a time deposit account.
	MajorType_TimeDeposit MajorType = 3
	// MajorType_CommercialLoan for a business loan account.
	MajorType_CommercialLoan MajorType = 4
	// MajorType_MortgageLoan for a home loan account.
	MajorType_MortgageLoan MajorType = 5
	// MajorType_ConsumerLoan for a consumer loan account.
	MajorType_ConsumerLoan MajorType = 6
)

var MajorType_name = map[int32]string{
	0: "UnknownMajorType",
	1: "Checking",
	2: "Saving",
	3: "TimeDeposit",
	4: "CommercialLoan",
	5: "MortgageLoan",
	6: "ConsumerLoan",
}

var MajorType_value = map[string]int32{
	"UnknownMajorType": 0,
	"Checking":         1,
	"Saving":           2,
	"TimeDeposit":      3,
	"CommercialLoan":   4,
	"MortgageLoan":     5,
	"ConsumerLoan":     6,
}

func (x MajorType) String() string {
	return proto.EnumName(MajorType_name, int32(x))
}

func (MajorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04f35ee2b66d476e, []int{0}
}

// MajorCategory describes the category of the account.
type MajorCategory int32

const (
	MajorCategory_UnknownMajorCategory MajorCategory = 0
	// MajorCategory_Dep for deposit category.
	MajorCategory_Dep MajorCategory = 1
	// MajorCategory_Loan for loan category.
	MajorCategory_Loan MajorCategory = 2
)

var MajorCategory_name = map[int32]string{
	0: "UnknownMajorCategory",
	1: "Dep",
	2: "Loan",
}

var MajorCategory_value = map[string]int32{
	"UnknownMajorCategory": 0,
	"Dep":                  1,
	"Loan":                 2,
}

func (x MajorCategory) String() string {
	return proto.EnumName(MajorCategory_name, int32(x))
}

func (MajorCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04f35ee2b66d476e, []int{1}
}

// DEPRECIATED: BankCode indicates which bank to use; these should be a list of banks
//that we are currently integrated with
//This is the updated list of banks per January 2018
type BankCode int32

const (
	BankCode_UnknownBankCode              BankCode = 0
	BankCode_Mandiri                      BankCode = 1
	BankCode_Bca                          BankCode = 2
	BankCode_Bni                          BankCode = 3
	BankCode_Bri                          BankCode = 4
	BankCode_DummyBank                    BankCode = 5
	BankCode_Bdo                          BankCode = 6
	BankCode_Bpi                          BankCode = 7
	BankCode_Aceh                         BankCode = 8
	BankCode_Agris                        BankCode = 9
	BankCode_Agroniaga                    BankCode = 10
	BankCode_AmarIndonesia                BankCode = 11
	BankCode_Andara                       BankCode = 12
	BankCode_Antardaerah                  BankCode = 13
	BankCode_AnzIndonesia                 BankCode = 14
	BankCode_Arthagraha                   BankCode = 15
	BankCode_Artos                        BankCode = 16
	BankCode_BangkokIndonesia             BankCode = 17
	BankCode_BarclaysIndonesia            BankCode = 18
	BankCode_BcaSyariah                   BankCode = 19
	BankCode_Bi                           BankCode = 20
	BankCode_BisnisInternasional          BankCode = 21
	BankCode_BniSyariah                   BankCode = 22
	BankCode_BriSyariah                   BankCode = 23
	BankCode_Btpn                         BankCode = 24
	BankCode_BtpnSyariah                  BankCode = 25
	BankCode_Bukopin                      BankCode = 26
	BankCode_BukopinSyariah               BankCode = 27
	BankCode_BumiArta                     BankCode = 28
	BankCode_CapitalIndonesia             BankCode = 29
	BankCode_CentratamaNasional           BankCode = 30
	BankCode_CtbcIndonesia                BankCode = 31
	BankCode_Danamon                      BankCode = 32
	BankCode_Danpac                       BankCode = 33
	BankCode_DinarIndonesia               BankCode = 34
	BankCode_Dki                          BankCode = 35
	BankCode_DkiSyariah                   BankCode = 36
	BankCode_EkonomiRaharja               BankCode = 37
	BankCode_Fama                         BankCode = 38
	BankCode_Ganesha                      BankCode = 39
	BankCode_Harda                        BankCode = 40
	BankCode_IcbcIndonesia                BankCode = 41
	BankCode_InaPerdana                   BankCode = 42
	BankCode_IndexSelindo                 BankCode = 43
	BankCode_Jabar                        BankCode = 44
	BankCode_JabarSyariah                 BankCode = 45
	BankCode_JasaJakarta                  BankCode = 46
	BankCode_Jatim                        BankCode = 47
	BankCode_JatimSyariah                 BankCode = 48
	BankCode_KebHana                      BankCode = 49
	BankCode_KesejahteraanEkonomi         BankCode = 50
	BankCode_MandiriSyariah               BankCode = 51
	BankCode_MaspionIndonesia             BankCode = 52
	BankCode_Mayapada                     BankCode = 53
	BankCode_Maybank                      BankCode = 54
	BankCode_MaybankSyariahIndonesia      BankCode = 55
	BankCode_Mayora                       BankCode = 56
	BankCode_Mega                         BankCode = 57
	BankCode_MegaSyariah                  BankCode = 58
	BankCode_MestikaDharma                BankCode = 59
	BankCode_MetroExpress                 BankCode = 60
	BankCode_Mitraniaga                   BankCode = 61
	BankCode_MizuhoIndonesia              BankCode = 62
	BankCode_MncInternational             BankCode = 63
	BankCode_MuamalatIndonesia            BankCode = 64
	BankCode_MultiArta                    BankCode = 65
	BankCode_Mutiara                      BankCode = 66
	BankCode_NusantaraParahyangan         BankCode = 67
	BankCode_OcbcNisp                     BankCode = 68
	BankCode_OcbcNispSyariah              BankCode = 69
	BankCode_BankOfAmericaIndonesia       BankCode = 70
	BankCode_BankOfChinaIndonesia         BankCode = 71
	BankCode_BankOfIndiaIndonesia         BankCode = 72
	BankCode_Pikko                        BankCode = 73
	BankCode_PrimaMaster                  BankCode = 74
	BankCode_PundiIndonesia               BankCode = 75
	BankCode_QnbIndonesia                 BankCode = 76
	BankCode_RoyalIndonesia               BankCode = 77
	BankCode_SahabatSampoerna             BankCode = 78
	BankCode_SbiIndonesia                 BankCode = 79
	BankCode_SinarHarapan                 BankCode = 80
	BankCode_Sinarmas                     BankCode = 81
	BankCode_Btn                          BankCode = 82
	BankCode_BtnSyariah                   BankCode = 83
	BankCode_UobIndonesia                 BankCode = 84
	BankCode_Victoria                     BankCode = 85
	BankCode_VictoriaSyariah              BankCode = 86
	BankCode_WinduKentjana                BankCode = 87
	BankCode_WooriSaudaraIndonesia        BankCode = 88
	BankCode_YudhaBakti                   BankCode = 89
	BankCode_BnpParibasIndonesia          BankCode = 90
	BankCode_BpdAcehSyariah               BankCode = 91
	BankCode_BpdBali                      BankCode = 92
	BankCode_BpdBengkulu                  BankCode = 93
	BankCode_BpdJambi                     BankCode = 94
	BankCode_BpdJawaTengah                BankCode = 95
	BankCode_BpdKalimantanBarat           BankCode = 96
	BankCode_BpdKalimantanBaratSyariah    BankCode = 97
	BankCode_BpdKalimantanTengah          BankCode = 98
	BankCode_BpdKalimantanTimur           BankCode = 99
	BankCode_BpdKalimantanTimurSyariah    BankCode = 100
	BankCode_BpdKalimantanSelatan         BankCode = 101
	BankCode_BpdKalimantanSelatanSyariah  BankCode = 102
	BankCode_BpdLampung                   BankCode = 103
	BankCode_BpdMaluku                    BankCode = 104
	BankCode_BpdNtb                       BankCode = 105
	BankCode_BpdNtt                       BankCode = 106
	BankCode_BpdPapua                     BankCode = 107
	BankCode_BpdRiauKepri                 BankCode = 108
	BankCode_BpdSulawesiSelatanBarat      BankCode = 109
	BankCode_BpdSulawesiTengah            BankCode = 110
	BankCode_BpdSulawesiTenggara          BankCode = 111
	BankCode_BpdSulawesiUtara             BankCode = 112
	BankCode_BpdSumateraBarat             BankCode = 113
	BankCode_BpdSumateraBaratSyariah      BankCode = 114
	BankCode_BpdSumateraSelatan           BankCode = 115
	BankCode_BpdSumateraSelatanBabel      BankCode = 116
	BankCode_BpdSumateraSelatanSyariah    BankCode = 117
	BankCode_BpdSumateraSelatanUus        BankCode = 118
	BankCode_BpdSumateraUtara             BankCode = 119
	BankCode_BpdSumateraUtaraSyariah      BankCode = 120
	BankCode_BpdYogyakarta                BankCode = 121
	BankCode_BpdYogyakartaSyariah         BankCode = 122
	BankCode_CimbNiaga                    BankCode = 123
	BankCode_CimbNiagaSyariah             BankCode = 124
	BankCode_CitibankIndonesia            BankCode = 125
	BankCode_CommonwealthIndonesia        BankCode = 126
	BankCode_DanamonSyariah               BankCode = 127
	BankCode_DbsIndonesia                 BankCode = 128
	BankCode_DeutscheAgIndonesia          BankCode = 129
	BankCode_NobuIndonesia                BankCode = 130
	BankCode_Panin                        BankCode = 131
	BankCode_PaninSyariah                 BankCode = 132
	BankCode_RaboIndonesia                BankCode = 133
	BankCode_ResonaPerdania               BankCode = 134
	BankCode_StandardCharteredIndonesia   BankCode = 135
	BankCode_SumitomoMitsuiIndonesia      BankCode = 136
	BankCode_BankOfTokyoIndonesia         BankCode = 137
	BankCode_RoyalBankOfScotlandIndonesia BankCode = 138
	BankCode_Permata                      BankCode = 139
	BankCode_PermataSyariah               BankCode = 140
	BankCode_SinarmasSyariah              BankCode = 141
	BankCode_MandiriTaspen                BankCode = 142
	BankCode_Banten                       BankCode = 143
	BankCode_Bei                          BankCode = 144
	BankCode_ChaseIndonesia               BankCode = 145
	BankCode_CcbIndonesia                 BankCode = 146
	BankCode_JtrustIndonesia              BankCode = 147
	BankCode_Transferwise                 BankCode = 148
)

var BankCode_name = map[int32]string{
	0:   "UnknownBankCode",
	1:   "Mandiri",
	2:   "Bca",
	3:   "Bni",
	4:   "Bri",
	5:   "DummyBank",
	6:   "Bdo",
	7:   "Bpi",
	8:   "Aceh",
	9:   "Agris",
	10:  "Agroniaga",
	11:  "AmarIndonesia",
	12:  "Andara",
	13:  "Antardaerah",
	14:  "AnzIndonesia",
	15:  "Arthagraha",
	16:  "Artos",
	17:  "BangkokIndonesia",
	18:  "BarclaysIndonesia",
	19:  "BcaSyariah",
	20:  "Bi",
	21:  "BisnisInternasional",
	22:  "BniSyariah",
	23:  "BriSyariah",
	24:  "Btpn",
	25:  "BtpnSyariah",
	26:  "Bukopin",
	27:  "BukopinSyariah",
	28:  "BumiArta",
	29:  "CapitalIndonesia",
	30:  "CentratamaNasional",
	31:  "CtbcIndonesia",
	32:  "Danamon",
	33:  "Danpac",
	34:  "DinarIndonesia",
	35:  "Dki",
	36:  "DkiSyariah",
	37:  "EkonomiRaharja",
	38:  "Fama",
	39:  "Ganesha",
	40:  "Harda",
	41:  "IcbcIndonesia",
	42:  "InaPerdana",
	43:  "IndexSelindo",
	44:  "Jabar",
	45:  "JabarSyariah",
	46:  "JasaJakarta",
	47:  "Jatim",
	48:  "JatimSyariah",
	49:  "KebHana",
	50:  "KesejahteraanEkonomi",
	51:  "MandiriSyariah",
	52:  "MaspionIndonesia",
	53:  "Mayapada",
	54:  "Maybank",
	55:  "MaybankSyariahIndonesia",
	56:  "Mayora",
	57:  "Mega",
	58:  "MegaSyariah",
	59:  "MestikaDharma",
	60:  "MetroExpress",
	61:  "Mitraniaga",
	62:  "MizuhoIndonesia",
	63:  "MncInternational",
	64:  "MuamalatIndonesia",
	65:  "MultiArta",
	66:  "Mutiara",
	67:  "NusantaraParahyangan",
	68:  "OcbcNisp",
	69:  "OcbcNispSyariah",
	70:  "BankOfAmericaIndonesia",
	71:  "BankOfChinaIndonesia",
	72:  "BankOfIndiaIndonesia",
	73:  "Pikko",
	74:  "PrimaMaster",
	75:  "PundiIndonesia",
	76:  "QnbIndonesia",
	77:  "RoyalIndonesia",
	78:  "SahabatSampoerna",
	79:  "SbiIndonesia",
	80:  "SinarHarapan",
	81:  "Sinarmas",
	82:  "Btn",
	83:  "BtnSyariah",
	84:  "UobIndonesia",
	85:  "Victoria",
	86:  "VictoriaSyariah",
	87:  "WinduKentjana",
	88:  "WooriSaudaraIndonesia",
	89:  "YudhaBakti",
	90:  "BnpParibasIndonesia",
	91:  "BpdAcehSyariah",
	92:  "BpdBali",
	93:  "BpdBengkulu",
	94:  "BpdJambi",
	95:  "BpdJawaTengah",
	96:  "BpdKalimantanBarat",
	97:  "BpdKalimantanBaratSyariah",
	98:  "BpdKalimantanTengah",
	99:  "BpdKalimantanTimur",
	100: "BpdKalimantanTimurSyariah",
	101: "BpdKalimantanSelatan",
	102: "BpdKalimantanSelatanSyariah",
	103: "BpdLampung",
	104: "BpdMaluku",
	105: "BpdNtb",
	106: "BpdNtt",
	107: "BpdPapua",
	108: "BpdRiauKepri",
	109: "BpdSulawesiSelatanBarat",
	110: "BpdSulawesiTengah",
	111: "BpdSulawesiTenggara",
	112: "BpdSulawesiUtara",
	113: "BpdSumateraBarat",
	114: "BpdSumateraBaratSyariah",
	115: "BpdSumateraSelatan",
	116: "BpdSumateraSelatanBabel",
	117: "BpdSumateraSelatanSyariah",
	118: "BpdSumateraSelatanUus",
	119: "BpdSumateraUtara",
	120: "BpdSumateraUtaraSyariah",
	121: "BpdYogyakarta",
	122: "BpdYogyakartaSyariah",
	123: "CimbNiaga",
	124: "CimbNiagaSyariah",
	125: "CitibankIndonesia",
	126: "CommonwealthIndonesia",
	127: "DanamonSyariah",
	128: "DbsIndonesia",
	129: "DeutscheAgIndonesia",
	130: "NobuIndonesia",
	131: "Panin",
	132: "PaninSyariah",
	133: "RaboIndonesia",
	134: "ResonaPerdania",
	135: "StandardCharteredIndonesia",
	136: "SumitomoMitsuiIndonesia",
	137: "BankOfTokyoIndonesia",
	138: "RoyalBankOfScotlandIndonesia",
	139: "Permata",
	140: "PermataSyariah",
	141: "SinarmasSyariah",
	142: "MandiriTaspen",
	143: "Banten",
	144: "Bei",
	145: "ChaseIndonesia",
	146: "CcbIndonesia",
	147: "JtrustIndonesia",
	148: "Transferwise",
}

var BankCode_value = map[string]int32{
	"UnknownBankCode":              0,
	"Mandiri":                      1,
	"Bca":                          2,
	"Bni":                          3,
	"Bri":                          4,
	"DummyBank":                    5,
	"Bdo":                          6,
	"Bpi":                          7,
	"Aceh":                         8,
	"Agris":                        9,
	"Agroniaga":                    10,
	"AmarIndonesia":                11,
	"Andara":                       12,
	"Antardaerah":                  13,
	"AnzIndonesia":                 14,
	"Arthagraha":                   15,
	"Artos":                        16,
	"BangkokIndonesia":             17,
	"BarclaysIndonesia":            18,
	"BcaSyariah":                   19,
	"Bi":                           20,
	"BisnisInternasional":          21,
	"BniSyariah":                   22,
	"BriSyariah":                   23,
	"Btpn":                         24,
	"BtpnSyariah":                  25,
	"Bukopin":                      26,
	"BukopinSyariah":               27,
	"BumiArta":                     28,
	"CapitalIndonesia":             29,
	"CentratamaNasional":           30,
	"CtbcIndonesia":                31,
	"Danamon":                      32,
	"Danpac":                       33,
	"DinarIndonesia":               34,
	"Dki":                          35,
	"DkiSyariah":                   36,
	"EkonomiRaharja":               37,
	"Fama":                         38,
	"Ganesha":                      39,
	"Harda":                        40,
	"IcbcIndonesia":                41,
	"InaPerdana":                   42,
	"IndexSelindo":                 43,
	"Jabar":                        44,
	"JabarSyariah":                 45,
	"JasaJakarta":                  46,
	"Jatim":                        47,
	"JatimSyariah":                 48,
	"KebHana":                      49,
	"KesejahteraanEkonomi":         50,
	"MandiriSyariah":               51,
	"MaspionIndonesia":             52,
	"Mayapada":                     53,
	"Maybank":                      54,
	"MaybankSyariahIndonesia":      55,
	"Mayora":                       56,
	"Mega":                         57,
	"MegaSyariah":                  58,
	"MestikaDharma":                59,
	"MetroExpress":                 60,
	"Mitraniaga":                   61,
	"MizuhoIndonesia":              62,
	"MncInternational":             63,
	"MuamalatIndonesia":            64,
	"MultiArta":                    65,
	"Mutiara":                      66,
	"NusantaraParahyangan":         67,
	"OcbcNisp":                     68,
	"OcbcNispSyariah":              69,
	"BankOfAmericaIndonesia":       70,
	"BankOfChinaIndonesia":         71,
	"BankOfIndiaIndonesia":         72,
	"Pikko":                        73,
	"PrimaMaster":                  74,
	"PundiIndonesia":               75,
	"QnbIndonesia":                 76,
	"RoyalIndonesia":               77,
	"SahabatSampoerna":             78,
	"SbiIndonesia":                 79,
	"SinarHarapan":                 80,
	"Sinarmas":                     81,
	"Btn":                          82,
	"BtnSyariah":                   83,
	"UobIndonesia":                 84,
	"Victoria":                     85,
	"VictoriaSyariah":              86,
	"WinduKentjana":                87,
	"WooriSaudaraIndonesia":        88,
	"YudhaBakti":                   89,
	"BnpParibasIndonesia":          90,
	"BpdAcehSyariah":               91,
	"BpdBali":                      92,
	"BpdBengkulu":                  93,
	"BpdJambi":                     94,
	"BpdJawaTengah":                95,
	"BpdKalimantanBarat":           96,
	"BpdKalimantanBaratSyariah":    97,
	"BpdKalimantanTengah":          98,
	"BpdKalimantanTimur":           99,
	"BpdKalimantanTimurSyariah":    100,
	"BpdKalimantanSelatan":         101,
	"BpdKalimantanSelatanSyariah":  102,
	"BpdLampung":                   103,
	"BpdMaluku":                    104,
	"BpdNtb":                       105,
	"BpdNtt":                       106,
	"BpdPapua":                     107,
	"BpdRiauKepri":                 108,
	"BpdSulawesiSelatanBarat":      109,
	"BpdSulawesiTengah":            110,
	"BpdSulawesiTenggara":          111,
	"BpdSulawesiUtara":             112,
	"BpdSumateraBarat":             113,
	"BpdSumateraBaratSyariah":      114,
	"BpdSumateraSelatan":           115,
	"BpdSumateraSelatanBabel":      116,
	"BpdSumateraSelatanSyariah":    117,
	"BpdSumateraSelatanUus":        118,
	"BpdSumateraUtara":             119,
	"BpdSumateraUtaraSyariah":      120,
	"BpdYogyakarta":                121,
	"BpdYogyakartaSyariah":         122,
	"CimbNiaga":                    123,
	"CimbNiagaSyariah":             124,
	"CitibankIndonesia":            125,
	"CommonwealthIndonesia":        126,
	"DanamonSyariah":               127,
	"DbsIndonesia":                 128,
	"DeutscheAgIndonesia":          129,
	"NobuIndonesia":                130,
	"Panin":                        131,
	"PaninSyariah":                 132,
	"RaboIndonesia":                133,
	"ResonaPerdania":               134,
	"StandardCharteredIndonesia":   135,
	"SumitomoMitsuiIndonesia":      136,
	"BankOfTokyoIndonesia":         137,
	"RoyalBankOfScotlandIndonesia": 138,
	"Permata":                      139,
	"PermataSyariah":               140,
	"SinarmasSyariah":              141,
	"MandiriTaspen":                142,
	"Banten":                       143,
	"Bei":                          144,
	"ChaseIndonesia":               145,
	"CcbIndonesia":                 146,
	"JtrustIndonesia":              147,
	"Transferwise":                 148,
}

func (x BankCode) String() string {
	return proto.EnumName(BankCode_name, int32(x))
}

func (BankCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04f35ee2b66d476e, []int{2}
}

type CardStatus int32

const (
	CardStatus_UnknownCardStatus CardStatus = 0
	// CardStatus_Lock is the lock status for a card.
	CardStatus_Lock CardStatus = 1
	// CardStatus_Unlock is the unlock status for a card.
	CardStatus_Unlock CardStatus = 2
	// CardStatus_Active is the active status for a card.
	CardStatus_Active CardStatus = 3
)

var CardStatus_name = map[int32]string{
	0: "UnknownCardStatus",
	1: "Lock",
	2: "Unlock",
	3: "Active",
}

var CardStatus_value = map[string]int32{
	"UnknownCardStatus": 0,
	"Lock":              1,
	"Unlock":            2,
	"Active":            3,
}

func (x CardStatus) String() string {
	return proto.EnumName(CardStatus_name, int32(x))
}

func (CardStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04f35ee2b66d476e, []int{3}
}

type CardAccessStatus int32

const (
	CardAccessStatus_UnknownCardAccessStatus CardAccessStatus = 0
	// CardAccessStatus_Often indicates a card is used often.
	CardAccessStatus_Often CardAccessStatus = 1
	// CardAccessStatus_Rare indicates a card is used rarely.
	CardAccessStatus_Rare CardAccessStatus = 2
)

var CardAccessStatus_name = map[int32]string{
	0: "UnknownCardAccessStatus",
	1: "Often",
	2: "Rare",
}

var CardAccessStatus_value = map[string]int32{
	"UnknownCardAccessStatus": 0,
	"Often":                   1,
	"Rare":                    2,
}

func (x CardAccessStatus) String() string {
	return proto.EnumName(CardAccessStatus_name, int32(x))
}

func (CardAccessStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04f35ee2b66d476e, []int{4}
}

// Amount defines a transaction amount.
type Amount struct {
	// Cur is the currency of the amount.
	Cur string `protobuf:"bytes,1,opt,name=Cur,json=cur,proto3" json:"Cur,omitempty"`
	// Num is the value of the amount.
	Num                  string   `protobuf:"bytes,2,opt,name=Num,json=num,proto3" json:"Num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Amount) Reset()         { *m = Amount{} }
func (m *Amount) String() string { return proto.CompactTextString(m) }
func (*Amount) ProtoMessage()    {}
func (*Amount) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f35ee2b66d476e, []int{0}
}

func (m *Amount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Amount.Unmarshal(m, b)
}
func (m *Amount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Amount.Marshal(b, m, deterministic)
}
func (m *Amount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Amount.Merge(m, src)
}
func (m *Amount) XXX_Size() int {
	return xxx_messageInfo_Amount.Size(m)
}
func (m *Amount) XXX_DiscardUnknown() {
	xxx_messageInfo_Amount.DiscardUnknown(m)
}

var xxx_messageInfo_Amount proto.InternalMessageInfo

func (m *Amount) GetCur() string {
	if m != nil {
		return m.Cur
	}
	return ""
}

func (m *Amount) GetNum() string {
	if m != nil {
		return m.Num
	}
	return ""
}

// Address hold all details about Address
type Address struct {
	// CountryName holds the country name information.
	CountryName string `protobuf:"bytes,1,opt,name=CountryName,json=country_name,proto3" json:"CountryName,omitempty"`
	// CityName holds the city name information.
	CityName string `protobuf:"bytes,2,opt,name=CityName,json=city_name,proto3" json:"CityName,omitempty"`
	// State holds the state information.
	State string `protobuf:"bytes,3,opt,name=State,json=state,proto3" json:"State,omitempty"`
	// Street holds the street information.
	Street string `protobuf:"bytes,4,opt,name=Street,json=line_1,proto3" json:"Street,omitempty"`
	// PostalCode holds the postal code information.
	PostalCode           string   `protobuf:"bytes,5,opt,name=PostalCode,json=postal_code,proto3" json:"PostalCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f35ee2b66d476e, []int{1}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *Address) GetCityName() string {
	if m != nil {
		return m.CityName
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *Address) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

// Location is An object representing a latitude/longitude pair. This is expressed as a pair
//of doubles representing degrees latitude and degrees longitude.
//Values must be within normalized ranges.
//Refer to https://godoc.org/google.golang.org/genproto/googleapis/type/latlng.
type Location struct {
	// The latitude in degrees. It must be in the range [-90.0, +90.0].
	Latitude float64 `protobuf:"fixed64,1,opt,name=Latitude,json=latitude,proto3" json:"Latitude,omitempty"`
	// The longitude in degrees. It must be in the range [-180.0, +180.0]
	Longitude            float64  `protobuf:"fixed64,2,opt,name=Longitude,json=longitude,proto3" json:"Longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f35ee2b66d476e, []int{2}
}

func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type OfflineUserInfo struct {
	// UserID
	UserID string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"UserID,omitempty"`
	// FirstName of the person
	FirstName string `protobuf:"bytes,2,opt,name=FirstName,json=first_name,proto3" json:"FirstName,omitempty"`
	// MiddleName or middle names (space separated) of the person
	MiddleName string `protobuf:"bytes,3,opt,name=MiddleName,json=middle_name,proto3" json:"MiddleName,omitempty"`
	// LastName or last names (space separated) of the person
	LastName string `protobuf:"bytes,4,opt,name=LastName,json=last_name,proto3" json:"LastName,omitempty"`
	// MobileNo contact of the person
	MobileNo string `protobuf:"bytes,5,opt,name=MobileNo,json=mobile_no,proto3" json:"MobileNo,omitempty"`
	// Location is the physical location of the interaction.
	Location             *Location `protobuf:"bytes,6,opt,name=Location,json=location,proto3" json:"Location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OfflineUserInfo) Reset()         { *m = OfflineUserInfo{} }
func (m *OfflineUserInfo) String() string { return proto.CompactTextString(m) }
func (*OfflineUserInfo) ProtoMessage()    {}
func (*OfflineUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f35ee2b66d476e, []int{3}
}

func (m *OfflineUserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OfflineUserInfo.Unmarshal(m, b)
}
func (m *OfflineUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OfflineUserInfo.Marshal(b, m, deterministic)
}
func (m *OfflineUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfflineUserInfo.Merge(m, src)
}
func (m *OfflineUserInfo) XXX_Size() int {
	return xxx_messageInfo_OfflineUserInfo.Size(m)
}
func (m *OfflineUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OfflineUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OfflineUserInfo proto.InternalMessageInfo

func (m *OfflineUserInfo) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *OfflineUserInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *OfflineUserInfo) GetMiddleName() string {
	if m != nil {
		return m.MiddleName
	}
	return ""
}

func (m *OfflineUserInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *OfflineUserInfo) GetMobileNo() string {
	if m != nil {
		return m.MobileNo
	}
	return ""
}

func (m *OfflineUserInfo) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// Structure of account information
type ProfileAccountInfo struct {
	// Bank code
	BankCode string `protobuf:"bytes,1,opt,name=BankCode,json=bank_code,proto3" json:"BankCode,omitempty"`
	// Account identifier
	AccountID string `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"AccountID,omitempty"`
	// Account identifier
	ProfileID            string   `protobuf:"bytes,3,opt,name=ProfileID,json=profile_id,proto3" json:"ProfileID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileAccountInfo) Reset()         { *m = ProfileAccountInfo{} }
func (m *ProfileAccountInfo) String() string { return proto.CompactTextString(m) }
func (*ProfileAccountInfo) ProtoMessage()    {}
func (*ProfileAccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f35ee2b66d476e, []int{4}
}

func (m *ProfileAccountInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileAccountInfo.Unmarshal(m, b)
}
func (m *ProfileAccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileAccountInfo.Marshal(b, m, deterministic)
}
func (m *ProfileAccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileAccountInfo.Merge(m, src)
}
func (m *ProfileAccountInfo) XXX_Size() int {
	return xxx_messageInfo_ProfileAccountInfo.Size(m)
}
func (m *ProfileAccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileAccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileAccountInfo proto.InternalMessageInfo

func (m *ProfileAccountInfo) GetBankCode() string {
	if m != nil {
		return m.BankCode
	}
	return ""
}

func (m *ProfileAccountInfo) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *ProfileAccountInfo) GetProfileID() string {
	if m != nil {
		return m.ProfileID
	}
	return ""
}

// Structure of credit rating information
type CreditRating struct {
	Rating               string   `protobuf:"bytes,1,opt,name=Rating,json=rating,proto3" json:"Rating,omitempty"`
	Source               string   `protobuf:"bytes,2,opt,name=Source,json=source,proto3" json:"Source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreditRating) Reset()         { *m = CreditRating{} }
func (m *CreditRating) String() string { return proto.CompactTextString(m) }
func (*CreditRating) ProtoMessage()    {}
func (*CreditRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f35ee2b66d476e, []int{5}
}

func (m *CreditRating) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreditRating.Unmarshal(m, b)
}
func (m *CreditRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreditRating.Marshal(b, m, deterministic)
}
func (m *CreditRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditRating.Merge(m, src)
}
func (m *CreditRating) XXX_Size() int {
	return xxx_messageInfo_CreditRating.Size(m)
}
func (m *CreditRating) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditRating.DiscardUnknown(m)
}

var xxx_messageInfo_CreditRating proto.InternalMessageInfo

func (m *CreditRating) GetRating() string {
	if m != nil {
		return m.Rating
	}
	return ""
}

func (m *CreditRating) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

// Structure of customer profile information
type Profile struct {
	// ProfileID is the unique identifier of a profile.
	ProfileID string `protobuf:"bytes,1,opt,name=ProfileID,json=profile_id,proto3" json:"ProfileID,omitempty"`
	// Full name
	FullName string `protobuf:"bytes,2,opt,name=FullName,json=fullname,proto3" json:"FullName,omitempty"`
	// User name
	UserName string `protobuf:"bytes,3,opt,name=UserName,json=username,proto3" json:"UserName,omitempty"`
	// Birth date
	BirthDate string `protobuf:"bytes,4,opt,name=BirthDate,json=birthdate,proto3" json:"BirthDate,omitempty"`
	// Language code used
	Language string `protobuf:"bytes,5,opt,name=Language,json=language,proto3" json:"Language,omitempty"`
	// User country code (VN, US, ID, SG, ...).
	Country string `protobuf:"bytes,6,opt,name=Country,json=country,proto3" json:"Country,omitempty"`
	// User email address
	Email string `protobuf:"bytes,7,opt,name=Email,json=email,proto3" json:"Email,omitempty"`
	// True if email is verified, otherwise False
	EmailVefified bool `protobuf:"varint,8,opt,name=EmailVefified,json=email_verified,proto3" json:"EmailVefified,omitempty"`
	// Mobile number
	Mobile string `protobuf:"bytes,9,opt,name=Mobile,json=mobile,proto3" json:"Mobile,omitempty"`
	// User profile photo url
	Photo string `protobuf:"bytes,10,opt,name=Photo,json=photo,proto3" json:"Photo,omitempty"`
	// Title
	Title string `protobuf:"bytes,11,opt,name=Title,json=title,proto3" json:"Title,omitempty"`
	// Permanent address
	PermanentAddress *Address `protobuf:"bytes,12,opt,name=PermanentAddress,json=permanent_address,proto3" json:"PermanentAddress,omitempty"`
	// Contact address
	ContactAddress *Address `protobuf:"bytes,13,opt,name=ContactAddress,json=contact_address,proto3" json:"ContactAddress,omitempty"`
	// profile number
	ProfileNUmber string `protobuf:"bytes,14,opt,name=ProfileNUmber,json=profile_number,proto3" json:"ProfileNUmber,omitempty"`
	// Face image of the customer
	FaceImageUrl string `protobuf:"bytes,15,opt,name=FaceImageUrl,json=face_image_url,proto3" json:"FaceImageUrl,omitempty"`
	// Date when the face image was added/updated
	FaceImageDate string `protobuf:"bytes,16,opt,name=FaceImageDate,json=face_image_date,proto3" json:"FaceImageDate,omitempty"`
	// RelationshipStatus. Ex: Single | Married
	RelationshipStatus string `protobuf:"bytes,17,opt,name=RelationshipStatus,json=relationship_status,proto3" json:"RelationshipStatus,omitempty"`
	// Number of dependents
	Dependents int32 `protobuf:"varint,18,opt,name=Dependents,json=dependents,proto3" json:"Dependents,omitempty"`
	// Date of birth of dependents
	DobOfDependents []*timestamp.Timestamp `protobuf:"bytes,19,rep,name=DobOfDependents,json=dob_of_dependents,proto3" json:"DobOfDependents,omitempty"`
	// Credit rating
	CreditRating *CreditRating `protobuf:"bytes,20,opt,name=CreditRating,json=credit_rating,proto3" json:"CreditRating,omitempty"`
	// Credit Limit
	CreditLimit *Amount `protobuf:"bytes,21,opt,name=CreditLimit,json=credit_limit,proto3" json:"CreditLimit,omitempty"`
	// Highest education such as bachelor, masters etc
	HighestEducationAttained string `protobuf:"bytes,22,opt,name=HighestEducationAttained,json=highest_education_attained,proto3" json:"HighestEducationAttained,omitempty"`
	// Current employment status
	EmploymentStatus string `protobuf:"bytes,23,opt,name=EmploymentStatus,json=employment_status,proto3" json:"EmploymentStatus,omitempty"`
	// Know Your Customer status
	KycStatus bool `protobuf:"varint,24,opt,name=KycStatus,json=kyc_status,proto3" json:"KycStatus,omitempty"`
	// Branch Identifier
	BranchID string `protobuf:"bytes,25,opt,name=BranchID,json=branchId,proto3" json:"BranchID,omitempty"`
	// Name suffix
	NameSuffix           string   `protobuf:"bytes,26,opt,name=NameSuffix,json=nameSuffix,proto3" json:"NameSuffix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f35ee2b66d476e, []int{6}
}

func (m *Profile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Profile.Unmarshal(m, b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return xxx_messageInfo_Profile.Size(m)
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetProfileID() string {
	if m != nil {
		return m.ProfileID
	}
	return ""
}

func (m *Profile) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *Profile) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Profile) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *Profile) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Profile) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Profile) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Profile) GetEmailVefified() bool {
	if m != nil {
		return m.EmailVefified
	}
	return false
}

func (m *Profile) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *Profile) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *Profile) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Profile) GetPermanentAddress() *Address {
	if m != nil {
		return m.PermanentAddress
	}
	return nil
}

func (m *Profile) GetContactAddress() *Address {
	if m != nil {
		return m.ContactAddress
	}
	return nil
}

func (m *Profile) GetProfileNUmber() string {
	if m != nil {
		return m.ProfileNUmber
	}
	return ""
}

func (m *Profile) GetFaceImageUrl() string {
	if m != nil {
		return m.FaceImageUrl
	}
	return ""
}

func (m *Profile) GetFaceImageDate() string {
	if m != nil {
		return m.FaceImageDate
	}
	return ""
}

func (m *Profile) GetRelationshipStatus() string {
	if m != nil {
		return m.RelationshipStatus
	}
	return ""
}

func (m *Profile) GetDependents() int32 {
	if m != nil {
		return m.Dependents
	}
	return 0
}

func (m *Profile) GetDobOfDependents() []*timestamp.Timestamp {
	if m != nil {
		return m.DobOfDependents
	}
	return nil
}

func (m *Profile) GetCreditRating() *CreditRating {
	if m != nil {
		return m.CreditRating
	}
	return nil
}

func (m *Profile) GetCreditLimit() *Amount {
	if m != nil {
		return m.CreditLimit
	}
	return nil
}

func (m *Profile) GetHighestEducationAttained() string {
	if m != nil {
		return m.HighestEducationAttained
	}
	return ""
}

func (m *Profile) GetEmploymentStatus() string {
	if m != nil {
		return m.EmploymentStatus
	}
	return ""
}

func (m *Profile) GetKycStatus() bool {
	if m != nil {
		return m.KycStatus
	}
	return false
}

func (m *Profile) GetBranchID() string {
	if m != nil {
		return m.BranchID
	}
	return ""
}

func (m *Profile) GetNameSuffix() string {
	if m != nil {
		return m.NameSuffix
	}
	return ""
}

func init() {
	proto.RegisterEnum("types.MajorType", MajorType_name, MajorType_value)
	proto.RegisterEnum("types.MajorCategory", MajorCategory_name, MajorCategory_value)
	proto.RegisterEnum("types.BankCode", BankCode_name, BankCode_value)
	proto.RegisterEnum("types.CardStatus", CardStatus_name, CardStatus_value)
	proto.RegisterEnum("types.CardAccessStatus", CardAccessStatus_name, CardAccessStatus_value)
	proto.RegisterType((*Amount)(nil), "types.Amount")
	proto.RegisterType((*Address)(nil), "types.Address")
	proto.RegisterType((*Location)(nil), "types.Location")
	proto.RegisterType((*OfflineUserInfo)(nil), "types.OfflineUserInfo")
	proto.RegisterType((*ProfileAccountInfo)(nil), "types.ProfileAccountInfo")
	proto.RegisterType((*CreditRating)(nil), "types.CreditRating")
	proto.RegisterType((*Profile)(nil), "types.Profile")
}

func init() {
	proto.RegisterFile("github.com/openbank/openbank/v1/types/all.proto", fileDescriptor_04f35ee2b66d476e)
}

var fileDescriptor_04f35ee2b66d476e = []byte{
	// 2672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x59, 0x59, 0x7f, 0xdb, 0xc6,
	0x11, 0x27, 0xa5, 0x48, 0xa2, 0x56, 0xd7, 0x1a, 0xbe, 0x60, 0xc5, 0x89, 0x15, 0x27, 0xb1, 0x15,
	0xa7, 0x91, 0x63, 0xa7, 0x6d, 0xda, 0x24, 0x3d, 0x78, 0xd8, 0xb1, 0x2c, 0x51, 0x66, 0x44, 0x29,
	0xa9, 0xd3, 0x36, 0xec, 0x10, 0x58, 0x92, 0x6b, 0x02, 0xbb, 0xe8, 0x62, 0x61, 0x9b, 0xe9, 0x95,
	0xde, 0xe9, 0x9d, 0x1e, 0x6f, 0x7d, 0xea, 0xef, 0xd7, 0xb7, 0x7e, 0x81, 0x7e, 0x8c, 0x3c, 0xf6,
	0xa1, 0x1f, 0xa4, 0x8f, 0xfd, 0xed, 0x02, 0x03, 0x40, 0x26, 0xd3, 0xbe, 0x71, 0xe7, 0x3f, 0x33,
	0x3b, 0xfb, 0x9f, 0x63, 0x17, 0x12, 0xb9, 0x3e, 0xe4, 0x7a, 0x94, 0xf4, 0x77, 0x3c, 0x19, 0x5e,
	0x97, 0x11, 0x13, 0x7d, 0x10, 0xe3, 0xe2, 0xc7, 0xc3, 0x1b, 0xd7, 0xf5, 0x24, 0x62, 0xf1, 0x75,
	0x08, 0x82, 0x9d, 0x48, 0x49, 0x2d, 0x9d, 0x05, 0x2b, 0xd8, 0xbc, 0x34, 0x94, 0x72, 0x18, 0xb0,
	0xeb, 0x56, 0xd8, 0x4f, 0x06, 0xd7, 0x35, 0x0f, 0x59, 0xac, 0x21, 0x8c, 0x52, 0xbd, 0xcb, 0xfb,
	0x64, 0xb1, 0x1e, 0xca, 0x44, 0x68, 0xe7, 0x22, 0x99, 0x6f, 0x26, 0xca, 0xad, 0x6e, 0x55, 0xb7,
	0x97, 0x1b, 0xa4, 0x56, 0x71, 0x2b, 0xdb, 0x95, 0x57, 0x2b, 0x9d, 0xca, 0xe1, 0xbc, 0x97, 0x28,
	0x83, 0x1e, 0x24, 0xa1, 0x3b, 0x37, 0x8d, 0x8a, 0x24, 0x7c, 0x63, 0xb1, 0x56, 0xa1, 0x15, 0xb7,
	0x72, 0xf9, 0xdf, 0x55, 0xb2, 0x54, 0xf7, 0x7d, 0xc5, 0xe2, 0xd8, 0x79, 0x85, 0xac, 0x34, 0x8d,
	0x63, 0x35, 0x39, 0x80, 0x90, 0xcd, 0xf0, 0xbb, 0xea, 0xa5, 0x70, 0x4f, 0x40, 0xc8, 0x9c, 0xab,
	0xa4, 0xd6, 0xe4, 0x3a, 0xd5, 0x9d, 0xde, 0x65, 0xd9, 0xe3, 0x3a, 0x53, 0xdc, 0x22, 0x0b, 0x5d,
	0x0d, 0x9a, 0xb9, 0xf3, 0x53, 0x5a, 0x0b, 0xb1, 0x01, 0x9c, 0xcb, 0x64, 0xb1, 0xab, 0x15, 0x63,
	0xda, 0x7d, 0x6a, 0x4a, 0x65, 0x31, 0xe0, 0x82, 0xf5, 0x6e, 0x38, 0x2f, 0x13, 0xd2, 0x91, 0xb1,
	0x86, 0xa0, 0x29, 0x7d, 0xe6, 0x2e, 0x4c, 0xe9, 0xad, 0x44, 0x16, 0xed, 0x79, 0xd2, 0x67, 0xf9,
	0xf1, 0x7c, 0x52, 0xdb, 0x97, 0x1e, 0x68, 0x2e, 0x85, 0x73, 0x85, 0xd4, 0xf6, 0x41, 0x73, 0x9d,
	0xf8, 0xe9, 0xd9, 0xaa, 0x27, 0xcc, 0x6b, 0x41, 0x86, 0x39, 0xdb, 0x64, 0x79, 0x5f, 0x8a, 0x61,
	0xaa, 0x38, 0x37, 0xa5, 0xb8, 0x1c, 0x20, 0x98, 0xef, 0xf2, 0xb7, 0x39, 0xb2, 0x71, 0x6f, 0x30,
	0x30, 0x81, 0x1e, 0xc7, 0x4c, 0xed, 0x8a, 0x81, 0x74, 0x9e, 0x27, 0x8b, 0xf6, 0x77, 0x6b, 0x06,
	0x8f, 0x4b, 0x49, 0xcc, 0x54, 0x8f, 0xfb, 0xce, 0x4b, 0x64, 0xf9, 0x36, 0x57, 0xb1, 0xfe, 0x0c,
	0x0e, 0xc9, 0xc0, 0x80, 0x29, 0x89, 0x2f, 0x13, 0xd2, 0xe6, 0xbe, 0x1f, 0x30, 0xab, 0x3b, 0xcd,
	0xe4, 0x4a, 0x68, 0xd1, 0x3c, 0x35, 0xfb, 0x90, 0xb9, 0x9d, 0x66, 0x74, 0x39, 0x00, 0xf4, 0x7a,
	0x95, 0xd4, 0xda, 0xb2, 0xcf, 0x03, 0x76, 0x20, 0x67, 0x50, 0xba, 0x1c, 0x5a, 0xac, 0x27, 0xa4,
	0xf3, 0x7a, 0x41, 0xa4, 0xbb, 0xb8, 0x55, 0xdd, 0x5e, 0xb9, 0xb9, 0xb1, 0x63, 0x0b, 0x76, 0x07,
	0xc5, 0x4f, 0xb0, 0x99, 0x49, 0x73, 0x8e, 0xfe, 0x5a, 0x25, 0x4e, 0x47, 0xc9, 0x01, 0x0f, 0x58,
	0xdd, 0xb3, 0x75, 0x64, 0x69, 0xba, 0x4a, 0x6a, 0x0d, 0x10, 0x63, 0x9b, 0xd3, 0x69, 0xa2, 0x96,
	0x4d, 0xb3, 0xd8, 0x8c, 0x1a, 0xaa, 0xd0, 0xae, 0x35, 0x8b, 0x2a, 0x48, 0xc1, 0x8c, 0xd5, 0x6c,
	0xa7, 0xdd, 0xd6, 0x0c, 0xa6, 0x48, 0x94, 0x82, 0x3d, 0xee, 0xe7, 0xd1, 0x7d, 0x40, 0x56, 0x9b,
	0x8a, 0xf9, 0x5c, 0x1f, 0x82, 0xe6, 0x62, 0x68, 0x0a, 0x32, 0xfd, 0x35, 0x23, 0xa8, 0x45, 0x95,
	0xeb, 0x74, 0x65, 0xa2, 0xbc, 0x59, 0x99, 0x5b, 0x8c, 0x2d, 0x92, 0xfb, 0xff, 0x07, 0x21, 0x4b,
	0x59, 0x4c, 0x27, 0xc3, 0xab, 0xfe, 0xaf, 0xf0, 0x4c, 0xc9, 0xde, 0x4e, 0x82, 0xe0, 0x33, 0xca,
	0xa3, 0x36, 0x48, 0x82, 0xc0, 0xa6, 0xf1, 0x0a, 0xa9, 0x99, 0x62, 0xfb, 0x8c, 0xd2, 0xa8, 0x99,
	0x72, 0xb3, 0x7a, 0xdb, 0x64, 0xb9, 0xc1, 0x95, 0x1e, 0xb5, 0x4c, 0x37, 0xce, 0x28, 0x8c, 0xbe,
	0x01, 0x7d, 0xd3, 0x91, 0xb6, 0x59, 0xc4, 0x30, 0x81, 0xe1, 0xac, 0x5e, 0xab, 0x05, 0x19, 0xe6,
	0xbc, 0x40, 0x96, 0xb2, 0x99, 0x61, 0xcb, 0xe2, 0x89, 0x3a, 0xcf, 0xe6, 0x85, 0x99, 0x00, 0xb7,
	0x42, 0xe0, 0x81, 0xbb, 0x34, 0x3d, 0x01, 0x98, 0x01, 0x9c, 0x1b, 0x64, 0xcd, 0x6a, 0xbc, 0xcb,
	0x06, 0x7c, 0xc0, 0x99, 0xef, 0xd6, 0xb6, 0xaa, 0xdb, 0xb5, 0x13, 0x9a, 0xeb, 0x56, 0xb3, 0xf7,
	0x90, 0x29, 0xab, 0x61, 0xf8, 0x4f, 0x6b, 0xd7, 0x5d, 0x9e, 0xe6, 0x3f, 0xad, 0x5c, 0xb3, 0x71,
	0x67, 0x24, 0xb5, 0x74, 0xc9, 0xf4, 0xc6, 0x91, 0x01, 0x8c, 0xc6, 0x11, 0xd7, 0x01, 0x73, 0x57,
	0xa6, 0x35, 0xb4, 0x01, 0x9c, 0xb7, 0x09, 0xed, 0x30, 0x15, 0x82, 0x60, 0x42, 0x67, 0xa3, 0xd2,
	0x5d, 0xb5, 0x2d, 0xb0, 0x9e, 0xb5, 0x40, 0x26, 0x3d, 0x61, 0x7c, 0x2a, 0x42, 0x9b, 0x1e, 0x64,
	0xf3, 0xb5, 0x49, 0xd6, 0x9b, 0x52, 0x68, 0xf0, 0x72, 0x37, 0x6b, 0xff, 0xd7, 0xcd, 0x86, 0x97,
	0x5a, 0xe4, 0x4e, 0x6e, 0x90, 0xb5, 0xac, 0x7a, 0x0e, 0x8e, 0xc3, 0x3e, 0x53, 0xee, 0xfa, 0x54,
	0xdc, 0xeb, 0x58, 0x41, 0x22, 0x31, 0x1a, 0xce, 0xab, 0x64, 0xf5, 0x36, 0x78, 0x6c, 0x37, 0x84,
	0x21, 0x3b, 0x56, 0x81, 0xbb, 0x31, 0x6d, 0x31, 0x00, 0x8f, 0xf5, 0xb8, 0x51, 0xe8, 0x25, 0x2a,
	0x70, 0x6e, 0x92, 0xb5, 0xdc, 0xc2, 0xd6, 0x0a, 0x9d, 0x32, 0xd9, 0x28, 0x99, 0xd8, 0x8a, 0x79,
	0x93, 0x38, 0x87, 0x2c, 0xb0, 0x4d, 0x1f, 0x8f, 0x78, 0x64, 0x26, 0x7e, 0x12, 0xbb, 0xa7, 0xa6,
	0x0c, 0x4f, 0xab, 0x92, 0x56, 0x2f, 0xb6, 0x6a, 0xce, 0x35, 0x42, 0x5a, 0x2c, 0x62, 0xc2, 0x67,
	0x42, 0xc7, 0xae, 0xb3, 0x55, 0xdd, 0x5e, 0x38, 0xd9, 0x14, 0x7e, 0x8e, 0x3a, 0x87, 0x64, 0xa3,
	0x25, 0xfb, 0xf7, 0x06, 0x25, 0x83, 0xd3, 0x5b, 0xf3, 0xdb, 0x2b, 0x37, 0x37, 0x77, 0xd2, 0xbb,
	0x73, 0x07, 0xef, 0xce, 0x9d, 0x23, 0xbc, 0x3b, 0x4f, 0xa6, 0xc6, 0x97, 0xfd, 0x9e, 0x1c, 0xf4,
	0x4a, 0x3e, 0x5b, 0x27, 0xfb, 0xdf, 0x3d, 0x63, 0x13, 0x73, 0x3a, 0x4b, 0x4c, 0x19, 0x3a, 0xe1,
	0x69, 0xcd, 0xb3, 0x48, 0x2f, 0x9b, 0x08, 0x6f, 0x91, 0x95, 0x54, 0x75, 0x9f, 0x87, 0x5c, 0xbb,
	0x67, 0xad, 0x93, 0x35, 0xcc, 0xae, 0xbd, 0xb4, 0x9f, 0xb8, 0x4f, 0x53, 0xf3, 0xc0, 0xa8, 0x3b,
	0x77, 0x88, 0x7b, 0x87, 0x0f, 0x47, 0x2c, 0xd6, 0xb7, 0xfc, 0x24, 0x9d, 0x9e, 0x75, 0xad, 0x81,
	0x0b, 0xe6, 0xbb, 0xe7, 0xa6, 0x68, 0xdc, 0x1c, 0xa5, 0xba, 0x3d, 0x86, 0xca, 0x3d, 0xc8, 0xb4,
	0x9d, 0xd7, 0x09, 0xbd, 0x15, 0x46, 0x81, 0x9c, 0x84, 0x4c, 0xe8, 0x2c, 0x11, 0xe7, 0xa7, 0x3c,
	0x9c, 0x62, 0xb9, 0x0e, 0xa6, 0xe1, 0x25, 0xb2, 0xbc, 0x37, 0xf1, 0x32, 0x0b, 0x77, 0xaa, 0x03,
	0xc9, 0x78, 0xe2, 0xa1, 0xea, 0x15, 0x52, 0x6b, 0x28, 0x10, 0xde, 0x68, 0xb7, 0xe5, 0x5e, 0x98,
	0x1e, 0x10, 0xfd, 0x14, 0xf3, 0x4d, 0x66, 0xcd, 0x58, 0xea, 0x26, 0x83, 0x01, 0x7f, 0xec, 0x6e,
	0x4e, 0x8f, 0x3b, 0x91, 0xa3, 0x38, 0x2d, 0xaf, 0xfd, 0xbd, 0x4a, 0x96, 0xdb, 0xf0, 0x40, 0xaa,
	0xa3, 0x49, 0xc4, 0x1c, 0x97, 0xd0, 0x63, 0x31, 0x16, 0xf2, 0x91, 0xc8, 0x65, 0xb4, 0xb2, 0x39,
	0x57, 0xab, 0x38, 0x94, 0xd4, 0x9a, 0x23, 0xe6, 0x8d, 0xb9, 0x18, 0xd2, 0xaa, 0x95, 0xac, 0x93,
	0xc5, 0x2e, 0x3c, 0x34, 0xeb, 0x39, 0xbb, 0x3e, 0x4d, 0x56, 0x4c, 0x0d, 0xb4, 0x58, 0x24, 0x63,
	0xae, 0xe9, 0xbc, 0x15, 0x9e, 0x33, 0x7d, 0x18, 0x86, 0x4c, 0x79, 0x1c, 0x82, 0x7d, 0x09, 0x82,
	0x3e, 0x65, 0xe5, 0x67, 0xc8, 0x6a, 0x5b, 0x2a, 0x3d, 0x84, 0x21, 0xb3, 0xd2, 0x05, 0x94, 0x36,
	0xa5, 0x88, 0x93, 0x90, 0x29, 0x2b, 0x5d, 0x34, 0xd2, 0xcd, 0x39, 0xb7, 0x72, 0x6d, 0x9f, 0xac,
	0xd9, 0x88, 0x9a, 0xa0, 0xd9, 0x50, 0xaa, 0x89, 0x73, 0x91, 0x9c, 0x29, 0x47, 0x8a, 0xf2, 0x2c,
	0xda, 0x15, 0x32, 0xdf, 0x62, 0x51, 0x16, 0xe8, 0x2a, 0x79, 0xca, 0x7a, 0x9b, 0xcb, 0xbd, 0x7d,
	0xba, 0x59, 0x5c, 0x85, 0xce, 0x79, 0xb2, 0x91, 0x79, 0x42, 0x51, 0xe6, 0x64, 0x83, 0x2c, 0xb5,
	0x41, 0xf8, 0x5c, 0xf1, 0xcc, 0xd1, 0x0a, 0x99, 0x6f, 0x78, 0x90, 0x1d, 0xd7, 0x2c, 0x04, 0xcf,
	0x8e, 0x69, 0x16, 0x8a, 0x67, 0x67, 0x3b, 0x45, 0x96, 0x5b, 0x49, 0x18, 0x4e, 0x8c, 0xbb, 0xec,
	0x60, 0x06, 0xf7, 0x65, 0x7a, 0x1e, 0xbb, 0x88, 0x38, 0x5d, 0xc2, 0xe0, 0xea, 0x1e, 0x1b, 0xd1,
	0x9a, 0x5d, 0xad, 0x91, 0x85, 0xfa, 0x50, 0xf1, 0x98, 0x2e, 0xa3, 0xa7, 0xfa, 0x50, 0x49, 0xc1,
	0x61, 0x08, 0x94, 0x58, 0xd1, 0x59, 0xb2, 0x56, 0x0f, 0x41, 0xed, 0x0a, 0x5f, 0x0a, 0x16, 0x73,
	0xa0, 0x2b, 0x98, 0x8c, 0xba, 0xf0, 0x41, 0x01, 0x5d, 0xc5, 0x64, 0xd4, 0x85, 0x06, 0xe5, 0x03,
	0x53, 0x30, 0xa2, 0x6b, 0x48, 0x6f, 0x5d, 0x7c, 0x58, 0x98, 0xae, 0x5b, 0xa9, 0x43, 0x48, 0x5d,
	0xe9, 0x11, 0x0c, 0x15, 0x8c, 0x80, 0x6e, 0xe4, 0x71, 0x28, 0x2d, 0x63, 0x4a, 0xed, 0xd2, 0x25,
	0xb4, 0x01, 0x62, 0x38, 0x96, 0xe3, 0xc2, 0xf8, 0x94, 0x45, 0x2e, 0x90, 0x53, 0x0d, 0x50, 0x5e,
	0x00, 0x93, 0xb8, 0x80, 0x1c, 0xf4, 0xdb, 0xf0, 0xa0, 0x3b, 0x01, 0xc5, 0x61, 0x44, 0x4f, 0x5b,
	0x19, 0x21, 0x73, 0x0d, 0x4e, 0xcf, 0xd8, 0xdf, 0x4f, 0x93, 0xd3, 0x0d, 0x1e, 0x0b, 0x1e, 0xef,
	0x0a, 0x6d, 0xee, 0xcc, 0x98, 0x4b, 0x01, 0x01, 0x3d, 0x9b, 0x1b, 0x0b, 0x8e, 0xc6, 0xe7, 0x72,
	0x99, 0xca, 0x65, 0xe7, 0x91, 0xbe, 0x86, 0x8e, 0x04, 0x75, 0xf1, 0xd4, 0x66, 0x85, 0x2a, 0x17,
	0x30, 0x8d, 0x8d, 0x64, 0x2c, 0x23, 0x2e, 0xe8, 0x26, 0xd6, 0x64, 0x26, 0x40, 0xc5, 0xa7, 0xb1,
	0xc4, 0x1b, 0x49, 0xc8, 0xeb, 0x4a, 0x03, 0xbd, 0x88, 0xe7, 0x6e, 0x42, 0xc4, 0x35, 0x04, 0xc5,
	0xe1, 0x9e, 0xb1, 0xc8, 0x26, 0x71, 0x9a, 0x4c, 0x68, 0x05, 0x1a, 0x42, 0x38, 0xc0, 0xd8, 0x9f,
	0xc5, 0x14, 0x35, 0x75, 0xdf, 0x2b, 0x4c, 0x2e, 0x61, 0x1c, 0x2d, 0x10, 0x10, 0x4a, 0x41, 0xb7,
	0x30, 0x67, 0x2d, 0x10, 0x11, 0x78, 0xf4, 0x39, 0x8c, 0xab, 0xc5, 0x45, 0x39, 0xb7, 0x97, 0xf3,
	0x62, 0x1e, 0x73, 0xfa, 0x3c, 0x92, 0xd0, 0x1a, 0xe7, 0x24, 0xbc, 0x80, 0x86, 0xb7, 0xc6, 0x52,
	0xc8, 0x90, 0x1f, 0xc2, 0x08, 0xd4, 0x03, 0xa0, 0x2f, 0x22, 0x39, 0xb7, 0x21, 0x04, 0x7a, 0x05,
	0xf7, 0x7f, 0x1b, 0x04, 0x8b, 0x47, 0x40, 0xaf, 0x62, 0x92, 0xef, 0x98, 0x0a, 0xa1, 0xdb, 0x18,
	0xf6, 0xae, 0x57, 0x0e, 0xfb, 0x25, 0xdc, 0x70, 0x57, 0x40, 0x87, 0x29, 0x1f, 0x04, 0xd0, 0x6b,
	0x58, 0x48, 0xbb, 0xc2, 0x67, 0x8f, 0xbb, 0x2c, 0xe0, 0xc2, 0x97, 0xf4, 0x65, 0xf4, 0x77, 0x17,
	0xfa, 0xa0, 0xe8, 0xe7, 0x50, 0xc9, 0x2e, 0x31, 0xd6, 0x57, 0x30, 0x45, 0x77, 0x21, 0x86, 0xbb,
	0x30, 0x06, 0xc3, 0xf3, 0x4e, 0x61, 0xa9, 0x79, 0x48, 0xaf, 0x17, 0x96, 0x9a, 0x87, 0x68, 0xf9,
	0x2a, 0xc6, 0xbf, 0xc7, 0xfa, 0x77, 0x4c, 0x14, 0x37, 0xac, 0xe0, 0x22, 0x39, 0xb3, 0xc7, 0x62,
	0xf6, 0x00, 0x46, 0x9a, 0x29, 0x00, 0x91, 0x71, 0x40, 0x6f, 0x22, 0x29, 0x59, 0xf7, 0xa2, 0x9b,
	0xd7, 0x30, 0xa7, 0x6d, 0x88, 0x23, 0x2e, 0x45, 0x71, 0xd2, 0xcf, 0x63, 0xfe, 0xdb, 0x30, 0x81,
	0x08, 0x7c, 0xa0, 0x5f, 0x28, 0x26, 0xc0, 0xc4, 0x3c, 0x8c, 0xe9, 0x17, 0xad, 0xe0, 0x12, 0x39,
	0x9f, 0x09, 0x32, 0xa7, 0x85, 0x8f, 0xd7, 0x31, 0xa7, 0x6d, 0x98, 0x48, 0x05, 0xf4, 0x4b, 0x98,
	0x82, 0x36, 0x1b, 0x02, 0xfd, 0x32, 0x1e, 0xde, 0xac, 0x30, 0xa0, 0x37, 0x90, 0xf7, 0x36, 0x8b,
	0x35, 0x1f, 0x43, 0x6b, 0x04, 0x2a, 0x04, 0xfa, 0x66, 0x3e, 0x21, 0x99, 0x56, 0xf2, 0xd6, 0xe3,
	0xc8, 0x3c, 0x46, 0xe8, 0x5b, 0x98, 0x8d, 0x36, 0xd7, 0x0a, 0xd2, 0x91, 0xf0, 0x15, 0x2b, 0x3b,
	0x4f, 0x36, 0xda, 0xfc, 0xc3, 0x64, 0x24, 0x8b, 0x60, 0xbe, 0x9a, 0x1f, 0x55, 0x78, 0x59, 0x7b,
	0xe9, 0xb4, 0x44, 0xbf, 0x86, 0x6d, 0xdb, 0x4e, 0x20, 0x84, 0x00, 0x74, 0x61, 0xf4, 0x75, 0x9c,
	0x39, 0xed, 0x24, 0xd0, 0x69, 0x1b, 0xd4, 0x73, 0x1a, 0x12, 0xcd, 0xcd, 0x74, 0x69, 0x20, 0xf3,
	0x07, 0x49, 0x0c, 0x66, 0xc0, 0x40, 0x07, 0x14, 0x8c, 0x26, 0x20, 0x86, 0x20, 0x68, 0x13, 0x79,
	0xbc, 0xe7, 0xf5, 0xbd, 0x03, 0x1e, 0x47, 0xb4, 0x85, 0x11, 0xa2, 0x04, 0xcf, 0x7e, 0xcb, 0x02,
	0xcf, 0x92, 0x73, 0x66, 0x4a, 0xde, 0x1b, 0xd4, 0x43, 0xa6, 0xb8, 0x07, 0x45, 0x30, 0xb7, 0x71,
	0xa3, 0x14, 0x6f, 0x8e, 0xb8, 0x28, 0xa1, 0x6f, 0x9f, 0x44, 0x77, 0x85, 0xcf, 0x4b, 0xe8, 0x1d,
	0x2c, 0xaa, 0x0e, 0x1f, 0x8f, 0x25, 0xdd, 0x45, 0xee, 0x3b, 0x8a, 0x87, 0xd0, 0x86, 0x58, 0x33,
	0x45, 0xef, 0x62, 0x91, 0x74, 0x12, 0xe1, 0xf3, 0xc2, 0x76, 0x0f, 0xc9, 0x7f, 0x47, 0xf4, 0x0b,
	0xe9, 0x3e, 0x6a, 0x1f, 0xca, 0x49, 0x79, 0x18, 0xb4, 0x91, 0xe7, 0x2e, 0x8c, 0xa0, 0x0f, 0xba,
	0x0b, 0x61, 0x24, 0x0d, 0xdb, 0xf4, 0x00, 0xfd, 0x74, 0xfb, 0x25, 0xef, 0xf7, 0x72, 0xa9, 0x69,
	0xf4, 0x3b, 0xa0, 0x20, 0x02, 0x41, 0x3b, 0x48, 0x9b, 0x95, 0x86, 0x10, 0xd3, 0x77, 0xf2, 0x8b,
	0x42, 0x0b, 0x7a, 0x98, 0x4f, 0x3f, 0x9d, 0x4f, 0xac, 0x2e, 0x3a, 0x3a, 0x96, 0xa5, 0x30, 0x8f,
	0xd0, 0xd1, 0xbb, 0xdc, 0xd3, 0x52, 0x71, 0xa0, 0xc7, 0xc8, 0x3f, 0x4a, 0xd0, 0xc1, 0xbb, 0x58,
	0x7b, 0xef, 0x71, 0xe1, 0x27, 0x7b, 0x4c, 0xe8, 0x07, 0xa6, 0xb3, 0xde, 0xb3, 0xe2, 0x67, 0xc8,
	0xd9, 0xf7, 0xa4, 0x54, 0xbc, 0x0b, 0x89, 0xb9, 0x53, 0x8a, 0x0d, 0xbe, 0x81, 0xa1, 0xdc, 0x4f,
	0xfc, 0x11, 0x34, 0x60, 0xac, 0x39, 0xbd, 0x9f, 0x4f, 0x73, 0x11, 0x75, 0x40, 0xf1, 0x3e, 0x94,
	0xae, 0x82, 0xf7, 0xf3, 0x89, 0x1b, 0xf9, 0xe6, 0x9e, 0xc3, 0xed, 0xbf, 0x99, 0x8f, 0xe6, 0xc8,
	0x6f, 0x40, 0xc0, 0xe9, 0xb7, 0xf2, 0x01, 0x1e, 0xf9, 0x0d, 0x26, 0x86, 0xe3, 0x24, 0x48, 0xe8,
	0xb7, 0xf3, 0xb9, 0x1c, 0xf9, 0x77, 0x21, 0xec, 0x73, 0xfa, 0x01, 0x86, 0x6d, 0x25, 0x8f, 0xe0,
	0x88, 0x89, 0x21, 0x8c, 0x68, 0x0f, 0x87, 0x72, 0x23, 0xf2, 0xf7, 0x20, 0xe0, 0xa1, 0xa9, 0x4d,
	0xd1, 0x00, 0x05, 0x9a, 0x7e, 0xc7, 0x62, 0xcf, 0x91, 0x0b, 0xd3, 0x18, 0x46, 0x03, 0xf9, 0x11,
	0xca, 0x2a, 0x99, 0xef, 0xfe, 0x4c, 0xdf, 0x47, 0x3c, 0x4c, 0x14, 0xf5, 0x66, 0xfa, 0xb6, 0x18,
	0xfa, 0xf6, 0xf3, 0x52, 0x2d, 0xab, 0x74, 0xcd, 0xc3, 0x1c, 0x04, 0x65, 0x16, 0x7d, 0x9e, 0x3c,
	0x3d, 0x0b, 0x45, 0x17, 0x83, 0xbc, 0x00, 0x22, 0x7f, 0x1f, 0xc2, 0x28, 0x11, 0x43, 0x3a, 0xc4,
	0x66, 0x6d, 0x44, 0x7e, 0x1b, 0x82, 0x64, 0x9c, 0xd0, 0x11, 0x4e, 0xa0, 0x46, 0xe4, 0x1f, 0xe8,
	0x3e, 0xe5, 0x27, 0xd6, 0x9a, 0x3e, 0x28, 0xb1, 0xd9, 0x81, 0x28, 0x01, 0x3a, 0xc6, 0x2a, 0x6a,
	0x44, 0xfe, 0x21, 0x87, 0x64, 0x8f, 0x45, 0x8a, 0xd3, 0x00, 0x47, 0x5d, 0x23, 0xf2, 0xbb, 0x49,
	0x00, 0x8f, 0x58, 0xcc, 0xb3, 0x88, 0x52, 0x46, 0xc3, 0xfc, 0xea, 0x2f, 0x14, 0x32, 0xb2, 0x44,
	0x89, 0xc9, 0x32, 0x34, 0x34, 0xc3, 0x43, 0xe6, 0x8f, 0x89, 0x02, 0x3c, 0x36, 0x33, 0x84, 0x46,
	0x27, 0x90, 0x10, 0xcc, 0x40, 0x4f, 0xf7, 0xfa, 0xee, 0x89, 0x60, 0x4a, 0x08, 0x92, 0xa3, 0x4a,
	0xe9, 0x41, 0x05, 0x64, 0x37, 0x9e, 0x61, 0x9c, 0x9f, 0xa4, 0xcf, 0x02, 0xaa, 0x4b, 0xf9, 0x7b,
	0x42, 0x01, 0xfd, 0x27, 0xd8, 0x11, 0xd3, 0x2a, 0xc7, 0x49, 0x4c, 0x1f, 0xce, 0x88, 0x3c, 0x3d,
	0xd3, 0xa3, 0x19, 0x9b, 0x5b, 0x04, 0x3d, 0x3f, 0x2e, 0xd5, 0xf2, 0x7d, 0x39, 0x9c, 0x64, 0x57,
	0xe2, 0xa4, 0x54, 0x30, 0x85, 0x18, 0x8d, 0x3e, 0xc4, 0xbc, 0x37, 0x79, 0xd8, 0x3f, 0xb0, 0xb7,
	0xc0, 0xf7, 0xf2, 0xb7, 0x0a, 0x8a, 0x50, 0xf9, 0xfb, 0x98, 0xa8, 0x26, 0xd7, 0xdc, 0xdc, 0x5a,
	0x45, 0x63, 0xfe, 0x00, 0x8f, 0x65, 0x9e, 0xe7, 0x52, 0x3c, 0x62, 0x10, 0xe8, 0xd2, 0x6d, 0xf6,
	0xc3, 0xfc, 0x45, 0x92, 0x3e, 0x59, 0xd0, 0xe3, 0x8f, 0xb2, 0x98, 0x57, 0x5b, 0xfd, 0x52, 0x97,
	0x7f, 0x54, 0xcd, 0x62, 0x3e, 0xdd, 0x62, 0x89, 0x8e, 0xbd, 0x11, 0xab, 0x0f, 0x0b, 0xf4, 0xc7,
	0xd5, 0xcc, 0xd9, 0xda, 0x81, 0xec, 0x27, 0x85, 0xfc, 0x27, 0xf8, 0x1d, 0xb1, 0xd0, 0x01, 0xc1,
	0x05, 0xfd, 0x69, 0x15, 0x9d, 0xdb, 0x35, 0x6e, 0xf9, 0xb3, 0xdc, 0xfc, 0x10, 0xfa, 0xa5, 0x3b,
	0xee, 0xe7, 0xd5, 0x6c, 0xb6, 0xad, 0x1f, 0xb2, 0x58, 0xe2, 0x13, 0x85, 0x03, 0xfd, 0x45, 0x35,
	0x6b, 0xaa, 0xcd, 0xae, 0x06, 0xf3, 0x28, 0xf6, 0x9b, 0x23, 0x50, 0x9a, 0x29, 0xe6, 0x17, 0xd6,
	0xbf, 0x4c, 0x95, 0xb6, 0xc8, 0xf9, 0x6e, 0x12, 0x72, 0x2d, 0x43, 0xd9, 0xe6, 0x3a, 0x4e, 0x4a,
	0xb3, 0xfa, 0xe3, 0x6a, 0x46, 0x51, 0x76, 0xc9, 0x1c, 0xc9, 0xf1, 0xa4, 0xb4, 0xfd, 0xaf, 0x52,
	0xf8, 0x45, 0x72, 0xd1, 0xde, 0x09, 0xa9, 0x4e, 0xd7, 0x93, 0x3a, 0x00, 0x51, 0xda, 0xe7, 0xd7,
	0xd5, 0xac, 0xeb, 0x96, 0xec, 0x1f, 0x36, 0x34, 0xd0, 0xdf, 0xe4, 0x71, 0x67, 0x12, 0x3c, 0xe8,
	0x6f, 0xab, 0x59, 0x22, 0x37, 0xf0, 0x1e, 0x40, 0xe4, 0x77, 0x39, 0x05, 0xd9, 0x93, 0xe6, 0x08,
	0xe2, 0x88, 0x09, 0xfa, 0xfb, 0x6a, 0x36, 0x46, 0x17, 0x1b, 0x20, 0x34, 0x13, 0xf4, 0x0f, 0xf8,
	0xc5, 0x33, 0xdf, 0x60, 0x9c, 0x7e, 0x92, 0xef, 0xd4, 0x1c, 0x41, 0xcc, 0x8a, 0xa0, 0xfe, 0x98,
	0x33, 0xdd, 0xf4, 0x4a, 0xd7, 0xc7, 0x9f, 0xf2, 0x00, 0xee, 0x6a, 0x95, 0xc4, 0xa5, 0xa7, 0xc1,
	0x9f, 0x73, 0x83, 0x23, 0x05, 0x22, 0x1e, 0x30, 0xf5, 0x88, 0xc7, 0x8c, 0xfe, 0xa5, 0x9a, 0x7f,
	0x52, 0xdd, 0x27, 0xa4, 0x09, 0xca, 0x4f, 0xbf, 0x67, 0x4d, 0xc9, 0x65, 0xdf, 0x54, 0x85, 0x30,
	0xfb, 0xaa, 0xb2, 0x5f, 0x63, 0xde, 0xb8, 0xf8, 0x88, 0x3c, 0x16, 0x81, 0x59, 0xcf, 0xe5, 0xdf,
	0x31, 0x9e, 0xe6, 0x0f, 0x59, 0xfa, 0x61, 0x65, 0x5d, 0x1f, 0x99, 0x57, 0xb8, 0xf2, 0xeb, 0x9e,
	0xc7, 0xe2, 0x38, 0xdb, 0xe0, 0x12, 0x39, 0x5f, 0xda, 0xa0, 0x0c, 0x65, 0xdb, 0xac, 0x91, 0x85,
	0x7b, 0x03, 0x43, 0x49, 0xfe, 0x0d, 0x78, 0x08, 0x8a, 0x15, 0xdf, 0x80, 0x8d, 0xad, 0x3b, 0xd5,
	0x4e, 0xe5, 0xfd, 0xf4, 0x3f, 0x01, 0x1f, 0x55, 0x2b, 0x1f, 0x57, 0x2b, 0x9f, 0x54, 0x2b, 0xff,
	0xac, 0x56, 0xfe, 0x55, 0xad, 0xfc, 0xa7, 0x5a, 0xf9, 0x74, 0xae, 0xd2, 0x5f, 0xb4, 0x7f, 0xdb,
	0x78, 0xed, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x93, 0xf9, 0x6a, 0x5f, 0x18, 0x00, 0x00,
}
