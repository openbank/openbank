// +gunk openapiv2.Swagger{
//         Swagger: "2.0",
//         Info: openapiv2.Info{
//                 Title:       "Card API",
//                 Description: "Provides create and read operations on the card resource.",
//                 Version:     "1.0.0",
//         },
//         Schemes: []openapiv2.SwaggerScheme{
//                 openapiv2.HTTPS,
//         },
//         Consumes: []string{
//                 "application/json",
//         },
//         Produces: []string{
//                 "application/json",
//         },
//         Responses: map[string]openapiv2.Response{
//                 "400": openapiv2.Response{
//                         Description: "Returned when the request body is malformatted or does not match the expected request.",
//                 },
//                 "401": openapiv2.Response{
//                         Description: "Returned when the request does not contains the user's credentials.",
//                 },
//                 "403": openapiv2.Response{
//                         Description: "Returned when the user does not have permission to access the resource.",
//                 },
//                 "404": openapiv2.Response{
//                         Description: "Returned when the resource is not found.",
//                 },
//                 "500": openapiv2.Response{
//                         Description: "Returned when an unexpected error occured on the server side.",
//                 },
//         },
//         SecurityDefinitions: openapiv2.SecurityDefinitions{
//                 Security: map[string]openapiv2.SecurityScheme{
//                         "OAuth2": openapiv2.SecurityScheme{
//                                 Type:             openapiv2.TYPE_OAUTH2,
//                                 Flow:             openapiv2.FLOW_ACCESS_CODE,
//                                 Description:      "Access to card resources is restricted to authenticated users. The authentication process follows the Authorization Code flow.",
//                                 AuthorizationURL: "/v1/auth",
//                                 TokenURL:         "/v1/token",
//                                 Scopes: openapiv2.Scopes{
//                                         Scope: map[string]string{
//                                                 "https://auth.bnk.to/card.read":  "View card data",
//                                                 "https://auth.bnk.to/card.write": "Manage card data",
//                                         },
//                                 },
//                         },
//                 },
//         },
// }
package card

import (
	"time"

	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"

	types "github.com/openbank/openbank/v1/types"
)

// Card holds all details about a card.
type Card struct {
	// ID is a unique identifier of a card.
	ID string `pb:"1" json:"id"`

	// Account is the ID of the account associated with the card.
	Account string `pb:"2" json:"account"`

	// OwnerName is the name of the card owner.
	OwnerName string `pb:"3" json:"owner_name"`

	// ContactNumber is the contact number of the card owner.
	ContactNumber string `pb:"4" json:"contact_number"`

	// FirstName is the first name of card owner.
	FirstName string `pb:"5" json:"first_name"`

	// LastName is the last name of the card owner.
	LastName string `pb:"6" json:"last_name"`

	// Expiry is an expiry date of the card.
	Expiry time.Time `pb:"7" json:"expiry"`

	// Status is the status of the card.
	Status types.CardStatus `pb:"8" json:"status"`

	// AccessStatus is the access status of the card.
	AccessStatus types.CardAccessStatus `pb:"9" json:"access_status"`
}

// CardAttribute hold all detail about card attribute
type CardAttribute struct {
	ID     string `pb:"1" json:"id"`
	CardID string `pb:"2" json:"card_id"`
	Name   string `pb:"3" json:"name"`
	Type   string `pb:"4" json:"type"`
	Value  string `pb:"5" json:"value"`
}

// GetCardRequest is the request envelope to retrieve card information.
type GetCardRequest struct {
	// CardToken is the identifier to get the card information.
	CardToken string `pb:"1" json:"card_token"`
}

// UpdateCardStatusRequest is the request envelope to update card status.
type UpdateCardStatusRequest struct {
	// CardToken is the identifier to get the card information.
	CardToken string `pb:"1" json:"card_token"`

	// Status is the new card status.
	Status types.CardStatus `pb:"2" json:"status"`
}

// UpdateCardAccessStatusRequest is the request envelope to update card access status.
type UpdateCardAccessStatusRequest struct {
	// CardToken is the identifier to get the card information.
	CardToken string `pb:"1" json:"card_token"`

	// AccessStatus is the new card access status.
	AccessStatus types.CardAccessStatus `pb:"2" json:"access_status"`
}

// Result is result of the update operation.
type Result struct {
	// Success is a boolean indicating the success of the operation.
	Success bool `pb:"1" json:"success"`

	// ErrorCode is the code of the error.
	ErrorCode string `pb:"2" json:"error_code"`

	// ErrorMessage is the message of the error.
	ErrorMessage string `pb:"3" json:"error_message"`
}

// CreateCardRequest is the request data to create new card
type CreateCardRequest struct {
	// Account is the ID of the account associated with the card.
	AccountID string `pb:"1" json:"account_id"`

	// ContactNumber is the contact number of the card owner.
	ContactNumber string `pb:"2" json:"contact_number"`

	// FirstName is the first name of card owner.
	FirstName string `pb:"3" json:"first_name"`

	// LastName is the last name of the card owner.
	LastName string `pb:"4" json:"last_name"`
}

// CreateCardResponse is the response for CreateCardRequest
type CreateCardResponse struct {
	CardID string `pb:"1" json:"card_id"`
	Expiry string `pb:"2" json:"expiry"`
}

type CreateCardAttributeRequest struct {
	CardID string `pb:"1" json:"card_id"`
	Name   string `pb:"2" json:"name"`
	Type   string `pb:"3" json:"type"`
	Value  string `pb:"4" json:"value"`
}

type CreateCardAttributeResponse struct {
	AttributeID string `pb:"1" json:"attribute_id"`
	CardID      string `pb:"2" json:"card_id"`
}

type DeleteCardRequest struct {
	CardID string `pb:"1" json:"card_id"`
}

type GetUserCardsRequest struct {
	UserID string `pb:"1" json:"user_id"`
}

type GetUserCardsResponse struct {
	Result []Card `pb:"1" json:"result"`
}

// CardService provides Card operations.
type CardService interface {
	// CreateCard create card by information supplied from the user
	//
	// +gunk http.Match{
	//         Method: "POST",
	//         Path:   "/v1/card",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Card"},
	//         Description: "Create new card",
	//         Summary:     "Create new card",
	//         Responses: map[string]openapiv2.Response{
	//                 "201": openapiv2.Response{
	//                         Description: "Card Created",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/cardCreateCardResponse",
	//                                 },
	//                         },
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/card.write",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	CreateCard(CreateCardRequest) CreateCardResponse

	// CreateCardAttribute create card attribute for the card. Each Card Attribute is linked to its Card by CARD_ID
	//
	// +gunk http.Match{
	//         Method: "POST",
	//         Path:   "/v1/card/attribute",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Card"},
	//         Description: "Create new card attribute",
	//         Summary:     "Create new card attribute",
	//         Responses: map[string]openapiv2.Response{
	//                 "201": openapiv2.Response{
	//                         Description: "Card Attribute Created",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/cardCreateCardAttributeResponse",
	//                                 },
	//                         },
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/card.write",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	CreateCardAttribute(CreateCardAttributeRequest) CreateCardAttributeResponse

	// GetCard retrieves the detail of a card information, selected by its token.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/card/{CardToken}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Card"},
	//         Description: "Retrieves all data from a card, selected by the card_token you supplied.",
	//         Summary:     "Retrieve card information",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/cardCard",
	//                                 },
	//                         },
	//                 },
	//                 "404": openapiv2.Response{
	//                         Description: "Returned when the resource is not found.",
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/card.read",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	GetCard(GetCardRequest) Card

	// GetUserCards retrieves the detail of a cards information for the specific user, selected by user_id.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/card/user/{UserID}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Card"},
	//         Description: "Retrieves all available cards for specific user, selected by the user_id",
	//         Summary:     "Retrieves all available cards",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/cardGetUserCardsResponse",
	//                                 },
	//                         },
	//                 },
	//                 "404": openapiv2.Response{
	//                         Description: "Returned when the resource is not found.",
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/card.read",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	GetUserCards(GetUserCardsRequest) GetUserCardsResponse

	// UpdateCardStatus update the card status.
	//
	// +gunk http.Match{
	//         Method: "PUT",
	//         Path:   "/v1/card/status/{CardToken}",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Card"},
	//         Description: "Update Card status.",
	//         Summary:     "Update card status",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/cardResult",
	//                                 },
	//                         },
	//                 },
	//                 "404": openapiv2.Response{
	//                         Description: "Returned when the resource is not found.",
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/card.write",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	UpdateCardStatus(UpdateCardStatusRequest) Result

	// UpdateCardAccessStatus update the card access status.
	//
	// +gunk http.Match{
	//         Method: "PUT",
	//         Path:   "/v1/card/access_status/{CardToken}",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Card"},
	//         Description: "Update card access status.",
	//         Summary:     "Update card access status.",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/cardResult",
	//                                 },
	//                         },
	//                 },
	//                 "404": openapiv2.Response{
	//                         Description: "Returned when the resource is not found.",
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/card.write",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	UpdateCardAccessStatus(UpdateCardAccessStatusRequest) Result

	// DeleteCard deletes a card
	//
	// +gunk http.Match{
	//         Method: "DELETE",
	//         Path:   "/v1/card/{CardID}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Card"},
	//         Description: "Permanently delete a card.",
	//         Summary:     "Delete a card",
	//         Responses: map[string]openapiv2.Response{
	//                 "204": openapiv2.Response{
	//                         Description: "Card successfully deleted.",
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/card.write",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	DeleteCard(DeleteCardRequest)
}
