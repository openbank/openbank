{
  "swagger": "2.0",
  "info": {
    "title": "Accounts API",
    "description": "Provides CRUD operations on the accounts resource.",
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/accounts": {
      "get": {
        "summary": "List all accounts",
        "description": "Returns a list containing up to 20 accounts. You can paginate through account by supplying next_starting_index in your subsequents calls. next_starting_index contains the account_id of the last account_id of the current page.",
        "operationId": "GetAccounts",
        "responses": {
          "200": {
            "description": "Request executed successfully.",
            "schema": {
              "$ref": "#/definitions/accountsGetAccountsResponse"
            }
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "NextStartingIndex",
            "description": "NextStartingIndex is a cursor for pagination. It's an AccountID that defines\nthe current place in the total list of Accounts.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Account"
        ],
        "security": [
          {
            "OAuth2": [
              "read"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create an account",
        "description": "Creates a new account",
        "operationId": "CreateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountsCreateAccountResponse"
            }
          },
          "201": {
            "description": "Account created successfully.",
            "schema": {
              "$ref": "#/definitions/accountsCreateAccountResponse"
            }
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountsCreateAccountRequest"
            }
          }
        ],
        "tags": [
          "Account"
        ],
        "security": [
          {
            "OAuth2": [
              "write"
            ]
          }
        ]
      }
    },
    "/v1/accounts/check": {
      "post": {
        "summary": "Check whether account exists or not",
        "description": "Check whether account is exists, selected by the account_id you supplied.",
        "operationId": "CheckAccount",
        "responses": {
          "200": {
            "description": "Request executed successfully.",
            "schema": {
              "$ref": "#/definitions/accountsAccount"
            }
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource is not found.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "tags": [
          "Account",
          "CheckAccount"
        ],
        "security": [
          {
            "OAuth2": [
              "read"
            ]
          }
        ]
      }
    },
    "/v1/accounts/{AccountID}": {
      "get": {
        "summary": "Retrieve an account",
        "description": "Retrieves all data from an account, selected by the account_id you supplied.",
        "operationId": "GetAccount",
        "responses": {
          "200": {
            "description": "Request executed successfully.",
            "schema": {
              "$ref": "#/definitions/accountsAccount"
            }
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource is not found.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "AccountID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Account"
        ],
        "security": [
          {
            "OAuth2": [
              "read"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete an account",
        "description": "Permanently delete an account.",
        "operationId": "DeleteAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "Account deleted successfully.",
            "schema": {}
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "AccountID",
            "description": "AccountID is the account unique identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Account"
        ],
        "security": [
          {
            "OAuth2": [
              "write"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update an account",
        "description": "Updates an account with all the fields supplied.",
        "operationId": "UpdateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "Account updated successfully.",
            "schema": {}
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "AccountID",
            "description": "AccountID is the unique identifier of the account to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountsUpdateAccountRequest"
            }
          }
        ],
        "tags": [
          "Account"
        ],
        "security": [
          {
            "OAuth2": [
              "write"
            ]
          }
        ]
      }
    },
    "/v1/accounts/{AccountID}/status": {
      "get": {
        "summary": "Retrieve an account status",
        "description": "Retrieves status of the account, selected by the account_id you supplied.",
        "operationId": "GetAccountStatus",
        "responses": {
          "200": {
            "description": "Request executed successfully.",
            "schema": {
              "$ref": "#/definitions/accountsAccount"
            }
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource is not found.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "AccountID",
            "description": "AccountID is the unique identifier of the account.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Account",
          "AccountStatus"
        ],
        "security": [
          {
            "OAuth2": [
              "read"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update the status of the account",
        "description": "Updates the status of the account.",
        "operationId": "UpdateAccountStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "AccountStatus updated successfully.",
            "schema": {}
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "AccountID",
            "description": "AccountID is the account unique identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountsUpdateAccountStatusRequest"
            }
          }
        ],
        "tags": [
          "Account",
          "AccountStatus"
        ],
        "security": [
          {
            "OAuth2": [
              "write"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "accountsAccount": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "AccountID is the unique identifier of an account."
        },
        "Branch": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "BranchName": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "Status": {
          "type": "string",
          "description": "Status is the status of the account."
        },
        "AccruedInterestAtMaturityDate": {
          "type": "string",
          "format": "date-time",
          "description": "TODO: add comment."
        },
        "AmountDue": {
          "$ref": "#/definitions/typesAmount",
          "description": "TODO: add comment."
        },
        "AvailableBalance": {
          "$ref": "#/definitions/typesAmount",
          "description": "TODO: add comment."
        },
        "AvailableCreditLimit": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "CheckingInterestRate": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "ContractDate": {
          "type": "string",
          "format": "date-time",
          "description": "ContractDate is the date of the contract initialization."
        },
        "CreditLimit": {
          "type": "string",
          "description": "CreditLimit is the allowed credit limit."
        },
        "CurrentAccruedInterest": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "CurrentBalance": {
          "$ref": "#/definitions/typesAmount",
          "description": "TODO: add comment."
        },
        "CurrentTerm": {
          "type": "string",
          "description": "CurrentTerm is the account validity period."
        },
        "DueDate": {
          "type": "string",
          "format": "date-time",
          "description": "DueDate is the loan maturity date."
        },
        "InterestRate": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "MajorType": {
          "$ref": "#/definitions/typesMajorType",
          "description": "MajorType is the account type."
        },
        "MajorCategory": {
          "$ref": "#/definitions/typesMajorCategory",
          "description": "MajorCategory is the account category."
        },
        "MaturityDate": {
          "type": "string",
          "format": "date-time",
          "title": "MaturityDate is the maturity date, format is ISO 8601"
        },
        "NextPaymentDueDate": {
          "type": "string",
          "format": "date-time",
          "description": "TODO: add comment."
        },
        "OwnerName": {
          "type": "string",
          "description": "OwnerName is the name of the account's owner."
        },
        "StartDate": {
          "type": "string",
          "format": "date-time",
          "description": "TODO: add comment."
        }
      },
      "description": "Account holds all details about a bank account."
    },
    "accountsAccountRole": {
      "type": "object",
      "properties": {
        "EntityNumber": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "EntityType": {
          "$ref": "#/definitions/accountsEntityType",
          "description": "TODO: add comment."
        },
        "Role": {
          "type": "string",
          "description": "TODO: add comment."
        }
      },
      "description": "TODO: add comment."
    },
    "accountsCheckAccountResponse": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "AccountID is the account unique identifier."
        },
        "BankCode": {
          "type": "string",
          "description": "BankCode is the code that is related to bank."
        },
        "AccountName": {
          "type": "string",
          "description": "AccountName is the owner name of the account."
        }
      },
      "description": "CheckAccountResponse is the response for check account."
    },
    "accountsCreateAccountRequest": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "AccountID is the identifier of the account."
        },
        "Description": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "AccountRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountsAccountRole"
          },
          "description": "TODO: add comment."
        },
        "Branch": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "Customer": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "DebitTransaction": {
          "$ref": "#/definitions/accountsDebitTransaction",
          "description": "TODO: add comment."
        },
        "InterestRate": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "MajorType": {
          "$ref": "#/definitions/typesMajorType",
          "description": "MajorType is the type of the account."
        },
        "MaturityDate": {
          "type": "string",
          "format": "date-time",
          "description": "TODO: add comment."
        },
        "Minor": {
          "type": "string",
          "description": "TODO: add comment."
        }
      },
      "description": "CreateAccountRequest wraps all required fields for an account creation."
    },
    "accountsCreateAccountResponse": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "AccountID is the unique identifier of the newly created account."
        },
        "CreditTransactionNumber": {
          "type": "string",
          "description": "CreditTransactionNumber is the transaction number of the credited account."
        },
        "DebitTransactionNumber": {
          "type": "string",
          "description": "DebitTransactionNumber is the transaction number of the debited account."
        },
        "MajorType": {
          "$ref": "#/definitions/typesMajorType",
          "description": "MajorType is the type of the account."
        },
        "Minor": {
          "type": "string",
          "description": "TODO: add comment."
        }
      },
      "description": "CreateAccountResponse is the response envelope for an account creation."
    },
    "accountsDebitTransaction": {
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "DebitAccount": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "ExchangeRate": {
          "type": "string",
          "description": "TODO: add comment."
        },
        "IsFx": {
          "type": "boolean",
          "format": "boolean",
          "description": "TODO: add comment."
        }
      },
      "description": "TODO: add comment."
    },
    "accountsEntityType": {
      "type": "string",
      "enum": [
        "UnknownEntityType",
        "Pers",
        "Org"
      ],
      "default": "UnknownEntityType",
      "description": "EntityType describes the type of the entity.\n\n - Pers: EntityType_Pers is an individual customer.\n - Org: EntityType_Org is an organisation customer."
    },
    "accountsGetAccountStatusResponse": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "AccountID is the account unique identifier."
        },
        "EffectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "EffectiveDate is the date of the request."
        },
        "Status": {
          "type": "string",
          "description": "Status is the current status of the account."
        },
        "StatusDescription": {
          "type": "string",
          "description": "StatusDescription describe about the Status."
        }
      },
      "description": "GetAccountStatusResponse tell about the account current status."
    },
    "accountsGetAccountsResponse": {
      "type": "object",
      "properties": {
        "Result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountsAccount"
          },
          "description": "Result is a list containing up to 20 Accounts."
        },
        "HasMore": {
          "type": "boolean",
          "format": "boolean",
          "description": "HasMore indicates if there are more accounts available."
        }
      },
      "description": "GetAccountsResponse wraps the list of accounts."
    },
    "accountsUpdateAccountRequest": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "AccountID is the unique identifier of the account to update."
        },
        "Description": {
          "type": "string",
          "description": "TODO: add comment."
        }
      },
      "description": "UpdateAccountRequest wraps all fields available for update."
    },
    "accountsUpdateAccountStatusRequest": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "AccountID is the account unique identifier."
        },
        "Status": {
          "type": "string",
          "title": "Status is the status to be updated"
        }
      },
      "description": "UpdateAccountStatusRequest is the request envelope to update\nthe account status."
    },
    "typesAmount": {
      "type": "object",
      "properties": {
        "Cur": {
          "type": "string",
          "description": "Cur is the currency of the amount."
        },
        "Num": {
          "type": "string",
          "description": "Num is the value of the amount."
        }
      },
      "description": "Amount defines a transaction amount."
    },
    "typesMajorCategory": {
      "type": "string",
      "enum": [
        "UnknownMajorCategory",
        "Dep",
        "Loan"
      ],
      "default": "UnknownMajorCategory",
      "description": "MajorCategory describes the category of the account.\n\n - Dep: MajorCategory_Dep for deposit category.\n - Loan: MajorCategory_Loan for loan category."
    },
    "typesMajorType": {
      "type": "string",
      "enum": [
        "UnknownMajorType",
        "Checking",
        "Saving",
        "TimeDeposit",
        "CommercialLoan",
        "MortgageLoan",
        "ConsumerLoan"
      ],
      "default": "UnknownMajorType",
      "description": "MajorType describes the type of the account.\n\n - Checking: MajorType_Checking account.\n - Saving: MajorType_Saving account.\n - TimeDeposit: MajorType_TimeDeposit for a time deposit account.\n - CommercialLoan: MajorType_CommercialLoan for a business loan account.\n - MortgageLoan: MajorType_MortgageLoan for a home loan account.\n - ConsumerLoan: MajorType_ConsumerLoan for a consumer loan account."
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "description": "Access to accounts resources is restricted to authenticated users. The authentication process follows the Authorization Code flow.",
      "flow": "accessCode",
      "authorizationUrl": "/v1/auth",
      "tokenUrl": "/v1/token",
      "scopes": {
        "read": "Grants read access",
        "write": "Grants write access"
      }
    }
  }
}
