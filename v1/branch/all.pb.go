// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/openbank/openbank/v1/branch/all.proto

package branch

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	types "github.com/openbank/openbank/v1/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Branch holds all details about a branch.
type Branch struct {
	// ID is the unique identifier of the branch.
	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	// BankID is an identifier for the bank the branch is associated with.
	BankID string `protobuf:"bytes,2,opt,name=BankID,json=bank_id,proto3" json:"BankID,omitempty"`
	// Name is the branch name.
	Name string `protobuf:"bytes,3,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	// PhoneNumber is the branch's phone number.
	PhoneNumber string `protobuf:"bytes,4,opt,name=PhoneNumber,json=phone_number,proto3" json:"PhoneNumber,omitempty"`
	// Address is the branch's address.
	Address *types.Address `protobuf:"bytes,5,opt,name=Address,json=address,proto3" json:"Address,omitempty"`
	// Location is the branch's longitude and latitude.
	Location *types.Location `protobuf:"bytes,6,opt,name=Location,json=location,proto3" json:"Location,omitempty"`
	// Description is the branch's description.
	Description string `protobuf:"bytes,7,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	// Metadata is the branch's metadata.
	Metadata             string   `protobuf:"bytes,8,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Branch) Reset()         { *m = Branch{} }
func (m *Branch) String() string { return proto.CompactTextString(m) }
func (*Branch) ProtoMessage()    {}
func (*Branch) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c1d5fc3994e55fa, []int{0}
}

func (m *Branch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Branch.Unmarshal(m, b)
}
func (m *Branch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Branch.Marshal(b, m, deterministic)
}
func (m *Branch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Branch.Merge(m, src)
}
func (m *Branch) XXX_Size() int {
	return xxx_messageInfo_Branch.Size(m)
}
func (m *Branch) XXX_DiscardUnknown() {
	xxx_messageInfo_Branch.DiscardUnknown(m)
}

var xxx_messageInfo_Branch proto.InternalMessageInfo

func (m *Branch) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Branch) GetBankID() string {
	if m != nil {
		return m.BankID
	}
	return ""
}

func (m *Branch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Branch) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Branch) GetAddress() *types.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Branch) GetLocation() *types.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Branch) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Branch) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// CreateBranchRequest is a request envelope to create a branch.
type CreateBranchRequest struct {
	// BankID is an identifier for the bank the branch is associated with.
	BankID string `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"BankID,omitempty"`
	// Name is the branch name.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	// PhoneNumber is the branch's phone number.
	PhoneNumber string `protobuf:"bytes,3,opt,name=PhoneNumber,json=phone_number,proto3" json:"PhoneNumber,omitempty"`
	// Address is the branch's address.
	Address *types.Address `protobuf:"bytes,4,opt,name=Address,json=address,proto3" json:"Address,omitempty"`
	// Location is the branch's longitude and latitude.
	Location *types.Location `protobuf:"bytes,5,opt,name=Location,json=location,proto3" json:"Location,omitempty"`
	// Description is the branch's description.
	Description string `protobuf:"bytes,6,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	// Metadata is the branch's metadata.
	Metadata             string   `protobuf:"bytes,7,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBranchRequest) Reset()         { *m = CreateBranchRequest{} }
func (m *CreateBranchRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBranchRequest) ProtoMessage()    {}
func (*CreateBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c1d5fc3994e55fa, []int{1}
}

func (m *CreateBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBranchRequest.Unmarshal(m, b)
}
func (m *CreateBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBranchRequest.Marshal(b, m, deterministic)
}
func (m *CreateBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBranchRequest.Merge(m, src)
}
func (m *CreateBranchRequest) XXX_Size() int {
	return xxx_messageInfo_CreateBranchRequest.Size(m)
}
func (m *CreateBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBranchRequest proto.InternalMessageInfo

func (m *CreateBranchRequest) GetBankID() string {
	if m != nil {
		return m.BankID
	}
	return ""
}

func (m *CreateBranchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateBranchRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *CreateBranchRequest) GetAddress() *types.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *CreateBranchRequest) GetLocation() *types.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CreateBranchRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateBranchRequest) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// CreateBranchResponse is a response envelope for creating a branch.
type CreateBranchResponse struct {
	// BranchID is the branch unique identifier.
	BranchID             string   `protobuf:"bytes,1,opt,name=BranchID,json=branch_id,proto3" json:"BranchID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBranchResponse) Reset()         { *m = CreateBranchResponse{} }
func (m *CreateBranchResponse) String() string { return proto.CompactTextString(m) }
func (*CreateBranchResponse) ProtoMessage()    {}
func (*CreateBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c1d5fc3994e55fa, []int{2}
}

func (m *CreateBranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBranchResponse.Unmarshal(m, b)
}
func (m *CreateBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBranchResponse.Marshal(b, m, deterministic)
}
func (m *CreateBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBranchResponse.Merge(m, src)
}
func (m *CreateBranchResponse) XXX_Size() int {
	return xxx_messageInfo_CreateBranchResponse.Size(m)
}
func (m *CreateBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBranchResponse proto.InternalMessageInfo

func (m *CreateBranchResponse) GetBranchID() string {
	if m != nil {
		return m.BranchID
	}
	return ""
}

// UpdateBranchRequest is the request envelope to update a branch.
type UpdateBranchRequest struct {
	// BranchID is the branch unique identifier.
	BranchID string `protobuf:"bytes,1,opt,name=BranchID,json=branch_id,proto3" json:"BranchID,omitempty"`
	// Name is the branch name.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	// PhoneNumber is the branch phone number.
	PhoneNumber string `protobuf:"bytes,3,opt,name=PhoneNumber,json=phone_number,proto3" json:"PhoneNumber,omitempty"`
	// Address is the branch address details.
	Address *types.Address `protobuf:"bytes,4,opt,name=Address,json=address,proto3" json:"Address,omitempty"`
	// Location is the branch longitude and latitude.
	Location *types.Location `protobuf:"bytes,5,opt,name=Location,json=location,proto3" json:"Location,omitempty"`
	// Description is the branch description.
	Description string `protobuf:"bytes,6,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	// Metadata is the branch metadata.
	Metadata             string   `protobuf:"bytes,7,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBranchRequest) Reset()         { *m = UpdateBranchRequest{} }
func (m *UpdateBranchRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBranchRequest) ProtoMessage()    {}
func (*UpdateBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c1d5fc3994e55fa, []int{3}
}

func (m *UpdateBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBranchRequest.Unmarshal(m, b)
}
func (m *UpdateBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBranchRequest.Marshal(b, m, deterministic)
}
func (m *UpdateBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBranchRequest.Merge(m, src)
}
func (m *UpdateBranchRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateBranchRequest.Size(m)
}
func (m *UpdateBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBranchRequest proto.InternalMessageInfo

func (m *UpdateBranchRequest) GetBranchID() string {
	if m != nil {
		return m.BranchID
	}
	return ""
}

func (m *UpdateBranchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateBranchRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *UpdateBranchRequest) GetAddress() *types.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *UpdateBranchRequest) GetLocation() *types.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *UpdateBranchRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateBranchRequest) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// DeleteBranchRequest is the request envelope to delete a branch.
type DeleteBranchRequest struct {
	// BranchID is the branch unique identifier.
	BranchID             string   `protobuf:"bytes,1,opt,name=BranchID,json=branch_id,proto3" json:"BranchID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBranchRequest) Reset()         { *m = DeleteBranchRequest{} }
func (m *DeleteBranchRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBranchRequest) ProtoMessage()    {}
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c1d5fc3994e55fa, []int{4}
}

func (m *DeleteBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteBranchRequest.Unmarshal(m, b)
}
func (m *DeleteBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteBranchRequest.Marshal(b, m, deterministic)
}
func (m *DeleteBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBranchRequest.Merge(m, src)
}
func (m *DeleteBranchRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteBranchRequest.Size(m)
}
func (m *DeleteBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBranchRequest proto.InternalMessageInfo

func (m *DeleteBranchRequest) GetBranchID() string {
	if m != nil {
		return m.BranchID
	}
	return ""
}

// GetBranchRequest is the request envelope to get the branch data.
type GetBranchRequest struct {
	// BranchID is the branch unique identifier.
	BranchID             string   `protobuf:"bytes,1,opt,name=BranchID,json=branch_id,proto3" json:"BranchID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBranchRequest) Reset()         { *m = GetBranchRequest{} }
func (m *GetBranchRequest) String() string { return proto.CompactTextString(m) }
func (*GetBranchRequest) ProtoMessage()    {}
func (*GetBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c1d5fc3994e55fa, []int{5}
}

func (m *GetBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBranchRequest.Unmarshal(m, b)
}
func (m *GetBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBranchRequest.Marshal(b, m, deterministic)
}
func (m *GetBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBranchRequest.Merge(m, src)
}
func (m *GetBranchRequest) XXX_Size() int {
	return xxx_messageInfo_GetBranchRequest.Size(m)
}
func (m *GetBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBranchRequest proto.InternalMessageInfo

func (m *GetBranchRequest) GetBranchID() string {
	if m != nil {
		return m.BranchID
	}
	return ""
}

// GetBranchesResponse is the response for GetBranches
type GetBranchesResponse struct {
	// Result is the list of the branch.
	Result               []*Branch `protobuf:"bytes,1,rep,name=Result,json=result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetBranchesResponse) Reset()         { *m = GetBranchesResponse{} }
func (m *GetBranchesResponse) String() string { return proto.CompactTextString(m) }
func (*GetBranchesResponse) ProtoMessage()    {}
func (*GetBranchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c1d5fc3994e55fa, []int{6}
}

func (m *GetBranchesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBranchesResponse.Unmarshal(m, b)
}
func (m *GetBranchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBranchesResponse.Marshal(b, m, deterministic)
}
func (m *GetBranchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBranchesResponse.Merge(m, src)
}
func (m *GetBranchesResponse) XXX_Size() int {
	return xxx_messageInfo_GetBranchesResponse.Size(m)
}
func (m *GetBranchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBranchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBranchesResponse proto.InternalMessageInfo

func (m *GetBranchesResponse) GetResult() []*Branch {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Branch)(nil), "branch.Branch")
	proto.RegisterType((*CreateBranchRequest)(nil), "branch.CreateBranchRequest")
	proto.RegisterType((*CreateBranchResponse)(nil), "branch.CreateBranchResponse")
	proto.RegisterType((*UpdateBranchRequest)(nil), "branch.UpdateBranchRequest")
	proto.RegisterType((*DeleteBranchRequest)(nil), "branch.DeleteBranchRequest")
	proto.RegisterType((*GetBranchRequest)(nil), "branch.GetBranchRequest")
	proto.RegisterType((*GetBranchesResponse)(nil), "branch.GetBranchesResponse")
}

func init() {
	proto.RegisterFile("github.com/openbank/openbank/v1/branch/all.proto", fileDescriptor_0c1d5fc3994e55fa)
}

var fileDescriptor_0c1d5fc3994e55fa = []byte{
	// 1421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x97, 0x4f, 0x6f, 0x1b, 0xc7,
	0x15, 0xc0, 0x77, 0x97, 0x32, 0x45, 0x8d, 0x54, 0x5b, 0x1d, 0x15, 0x2d, 0xbd, 0x16, 0xe4, 0xa9,
	0x8c, 0x56, 0xaa, 0x2c, 0x2d, 0x29, 0x5a, 0x75, 0x51, 0x15, 0x45, 0x4b, 0x49, 0xb6, 0x2a, 0xc1,
	0x76, 0x59, 0xda, 0x35, 0x0a, 0x5f, 0x84, 0xe1, 0xee, 0x23, 0xb9, 0xd5, 0x72, 0x66, 0x33, 0x33,
	0x2b, 0x59, 0x09, 0x02, 0x18, 0x41, 0x0e, 0x06, 0x0c, 0x04, 0x86, 0x02, 0x18, 0xf0, 0xf7, 0x08,
	0xe0, 0x04, 0xc9, 0x07, 0xc8, 0x25, 0x40, 0x80, 0x00, 0x41, 0x90, 0x73, 0x72, 0xc8, 0x2d, 0xc7,
	0x9c, 0x92, 0x60, 0x77, 0x96, 0x7f, 0x24, 0x52, 0xa6, 0x22, 0x03, 0x39, 0xe5, 0x24, 0xe9, 0xfd,
	0x9b, 0x37, 0xbf, 0xf7, 0xe6, 0x3d, 0x2d, 0x2a, 0x36, 0x7c, 0xd5, 0x8c, 0x6a, 0x8e, 0xcb, 0x5b,
	0x05, 0x1e, 0x02, 0xab, 0x51, 0xb6, 0xdb, 0xfd, 0x65, 0x6f, 0xb9, 0x50, 0x13, 0x94, 0xb9, 0xcd,
	0x02, 0x0d, 0x02, 0x27, 0x14, 0x5c, 0x71, 0x9c, 0xd5, 0x12, 0x7b, 0xba, 0xc1, 0x79, 0x23, 0x80,
	0x02, 0x0d, 0xfd, 0x02, 0x65, 0x8c, 0x2b, 0xaa, 0x7c, 0xce, 0xa4, 0xb6, 0xb2, 0x17, 0x93, 0x1f,
	0xee, 0x52, 0x03, 0xd8, 0x92, 0xdc, 0xa7, 0x8d, 0x06, 0x88, 0x02, 0x0f, 0x13, 0x8b, 0x01, 0xd6,
	0x97, 0xd2, 0x58, 0xc9, 0x5f, 0xb5, 0xa8, 0x5e, 0x80, 0x56, 0xa8, 0x0e, 0x52, 0x65, 0x61, 0x58,
	0x8a, 0xea, 0x20, 0x04, 0xd9, 0xcd, 0x70, 0xf6, 0x6b, 0x0b, 0x65, 0xd7, 0x92, 0x24, 0xb1, 0x8d,
	0xac, 0xad, 0x8d, 0xbc, 0x49, 0xcc, 0xf9, 0xb1, 0x35, 0x94, 0x33, 0xf2, 0xc6, 0xbc, 0x51, 0x34,
	0x2a, 0x46, 0xd5, 0xf2, 0x3d, 0x7c, 0x05, 0x65, 0xd7, 0x28, 0xdb, 0xdd, 0xda, 0xc8, 0x5b, 0x7d,
	0xfa, 0xd1, 0x38, 0xf6, 0x8e, 0xef, 0xe1, 0x19, 0x34, 0x72, 0x87, 0xb6, 0x20, 0x9f, 0xe9, 0x33,
	0x19, 0x61, 0xb4, 0x05, 0x78, 0x09, 0x8d, 0x57, 0x9a, 0x9c, 0xc1, 0x9d, 0xa8, 0x55, 0x03, 0x91,
	0x1f, 0xe9, 0x33, 0x9b, 0x08, 0x63, 0xf5, 0x0e, 0x4b, 0xf4, 0x78, 0x05, 0x8d, 0x96, 0x3d, 0x4f,
	0x80, 0x94, 0xf9, 0x73, 0xc4, 0x9c, 0x1f, 0x2f, 0x9d, 0x77, 0x92, 0xec, 0x9d, 0x54, 0x7a, 0x34,
	0x09, 0xaa, 0x85, 0xf8, 0x2f, 0x28, 0x77, 0x8b, 0xbb, 0x09, 0xb1, 0x7c, 0x36, 0x71, 0xbb, 0x90,
	0xba, 0xb5, 0xc5, 0x47, 0xfc, 0x72, 0x41, 0x2a, 0xc5, 0x8b, 0x68, 0x7c, 0x03, 0xa4, 0x2b, 0xfc,
	0x84, 0x7c, 0x7e, 0xb4, 0x2f, 0xbb, 0x71, 0xaf, 0xab, 0xc6, 0x7f, 0x44, 0xb9, 0xdb, 0xa0, 0xa8,
	0x47, 0x15, 0xcd, 0xe7, 0xfa, 0x4c, 0x73, 0xad, 0x54, 0xb7, 0x9a, 0xcd, 0x19, 0x93, 0x46, 0xde,
	0x98, 0xfd, 0xdc, 0x42, 0x53, 0xeb, 0x02, 0xa8, 0x02, 0x4d, 0xbb, 0x0a, 0xaf, 0x45, 0x20, 0x55,
	0x0f, 0x58, 0x73, 0x38, 0x58, 0xeb, 0x74, 0x60, 0x33, 0xa7, 0x07, 0x3b, 0x72, 0x36, 0xb0, 0xe7,
	0x5e, 0x01, 0x6c, 0xf6, 0xf4, 0x60, 0x47, 0x4f, 0x01, 0x76, 0x13, 0xfd, 0xe6, 0x28, 0x57, 0x19,
	0x72, 0x26, 0x01, 0xcf, 0xa1, 0x9c, 0x96, 0x0c, 0x44, 0x3b, 0xa6, 0x1f, 0xe6, 0x8e, 0xef, 0x75,
	0x02, 0x7d, 0x69, 0xa1, 0xa9, 0xff, 0x86, 0x5e, 0x5f, 0x85, 0x4e, 0x1b, 0xe8, 0x97, 0x2a, 0xbd,
	0xa4, 0x4a, 0x37, 0xd1, 0xd4, 0x06, 0x04, 0x70, 0x56, 0xb6, 0x9d, 0x38, 0xeb, 0x68, 0x72, 0x13,
	0xd4, 0x2b, 0x06, 0xf9, 0x0f, 0x9a, 0xea, 0x04, 0x01, 0xd9, 0xe9, 0x98, 0x12, 0xca, 0x56, 0x41,
	0x46, 0x81, 0xca, 0x9b, 0x24, 0x93, 0xf0, 0xd6, 0xae, 0x8e, 0xb6, 0x3c, 0x12, 0x35, 0x2b, 0x12,
	0xcb, 0x76, 0xc8, 0xd2, 0x27, 0x13, 0xe8, 0x57, 0xda, 0xec, 0x2e, 0x88, 0x3d, 0xdf, 0x05, 0xfc,
	0xad, 0x85, 0xc6, 0x3a, 0xa7, 0xe0, 0x7c, 0x3b, 0xd6, 0xf1, 0xec, 0xed, 0x63, 0xa7, 0xcc, 0xbe,
	0x67, 0x1d, 0x96, 0x9f, 0x74, 0x87, 0xf2, 0xa5, 0x2a, 0x28, 0xe1, 0xc3, 0x1e, 0x10, 0x6d, 0x46,
	0x7c, 0x56, 0xe7, 0xa2, 0x95, 0xd4, 0xcc, 0xfe, 0x6b, 0x47, 0xd9, 0x23, 0x25, 0xb4, 0xc6, 0x23,
	0x45, 0x54, 0xb3, 0xe3, 0x22, 0x43, 0x70, 0xfd, 0xba, 0x0f, 0x1e, 0xa9, 0x1d, 0x24, 0xf2, 0xad,
	0x8d, 0xed, 0x4d, 0x94, 0x29, 0x15, 0x8b, 0xf8, 0x9f, 0x68, 0x26, 0x4d, 0x84, 0xc0, 0x43, 0x70,
	0x23, 0x05, 0x1e, 0x91, 0x91, 0xeb, 0x82, 0x94, 0xf5, 0x28, 0x08, 0x0e, 0x1c, 0x3c, 0x83, 0xa6,
	0x6d, 0xfb, 0x4a, 0xc1, 0x83, 0xba, 0xcf, 0x7c, 0xbd, 0x93, 0x74, 0x58, 0x9d, 0xe0, 0xf6, 0x32,
	0xca, 0xac, 0x14, 0x57, 0xf0, 0x02, 0x9a, 0xaf, 0x82, 0x8a, 0x04, 0x03, 0x8f, 0xec, 0x37, 0x81,
	0x25, 0xe7, 0x08, 0x90, 0x3c, 0x12, 0x2e, 0x10, 0x5f, 0x12, 0xc6, 0x15, 0xa9, 0xf3, 0x88, 0x79,
	0x4e, 0x6d, 0x09, 0x5d, 0x45, 0xd9, 0x7f, 0x97, 0x23, 0xd5, 0x2c, 0xe1, 0xdf, 0xa3, 0xcb, 0x4d,
	0xa5, 0x42, 0xb9, 0x5a, 0x28, 0xd0, 0x48, 0x35, 0x9d, 0x1a, 0xdb, 0x75, 0x14, 0x4f, 0x8f, 0x70,
	0x04, 0x50, 0xef, 0xad, 0xcf, 0xbe, 0x7a, 0xd7, 0xba, 0x88, 0x7f, 0xd7, 0x5d, 0xb0, 0x20, 0x0b,
	0x6f, 0xb4, 0x2b, 0xfe, 0xe6, 0x63, 0xcb, 0x78, 0x6a, 0x25, 0x65, 0xc1, 0xdf, 0x5b, 0x68, 0xbc,
	0xa7, 0xb0, 0xf8, 0xb7, 0x8e, 0x5e, 0x95, 0x4e, 0x7b, 0x55, 0x3a, 0x37, 0xe2, 0x55, 0x69, 0x5f,
	0xea, 0x2b, 0x46, 0xb7, 0x0b, 0x66, 0x5f, 0x58, 0x87, 0xe5, 0xe7, 0x5d, 0xfe, 0x97, 0x3b, 0x88,
	0x69, 0x10, 0x10, 0xba, 0x47, 0xfd, 0x80, 0xd6, 0x82, 0x36, 0x5a, 0x90, 0xf6, 0xf5, 0x81, 0x35,
	0x10, 0xd0, 0xa0, 0xc2, 0xf3, 0x59, 0xe3, 0x04, 0x37, 0x67, 0xfb, 0x9e, 0x2e, 0xc0, 0xed, 0xa1,
	0x05, 0xb8, 0x8a, 0xfe, 0x64, 0xcf, 0x0d, 0x2a, 0xc0, 0x80, 0xec, 0x7f, 0xa6, 0x6a, 0x9c, 0xc7,
	0x13, 0xbd, 0xd5, 0xd0, 0x25, 0x28, 0x1a, 0xf8, 0x03, 0x0b, 0x4d, 0xf4, 0x0e, 0x63, 0xdc, 0x21,
	0x3d, 0x60, 0xf5, 0xd9, 0xd3, 0x83, 0x95, 0x69, 0x1d, 0xbe, 0x31, 0x0f, 0xcb, 0x1f, 0x9b, 0x9d,
	0x3a, 0x5c, 0xd0, 0x46, 0x84, 0xa6, 0x08, 0xed, 0x79, 0x2d, 0x90, 0x84, 0x12, 0x06, 0xfb, 0xed,
	0x56, 0xa7, 0xcc, 0x23, 0x22, 0xb9, 0xb9, 0x24, 0xbe, 0x92, 0xc4, 0xf7, 0x9c, 0xed, 0xbb, 0x31,
	0xe9, 0x65, 0x7c, 0x0b, 0x4d, 0xeb, 0x58, 0xc4, 0x4d, 0x3c, 0x8f, 0x73, 0x5e, 0x44, 0x0b, 0xf6,
	0xfc, 0x20, 0xce, 0x83, 0xd2, 0xab, 0x39, 0x68, 0xb1, 0x43, 0x6d, 0x16, 0x91, 0x97, 0x50, 0xdb,
	0x17, 0xbe, 0x82, 0x04, 0xdb, 0xaf, 0x57, 0xcd, 0x85, 0xd9, 0x01, 0xe4, 0x92, 0xe6, 0x7d, 0xdb,
	0x42, 0x13, 0xbd, 0xeb, 0xa7, 0xcb, 0x6e, 0xc0, 0x52, 0xb2, 0x4f, 0x68, 0xed, 0xd9, 0x8f, 0xcc,
	0xc3, 0xf2, 0xd3, 0x1e, 0x6a, 0xda, 0xb7, 0x4b, 0x6d, 0x46, 0x0b, 0x64, 0x47, 0x32, 0x27, 0x7b,
	0xfb, 0x76, 0xfb, 0x0f, 0x31, 0xab, 0x95, 0xf8, 0xd1, 0xa7, 0xac, 0x7a, 0x19, 0x91, 0x28, 0x71,
	0xf6, 0x9c, 0x33, 0xdd, 0x7e, 0x7a, 0xd5, 0x5c, 0xb0, 0x87, 0xbd, 0x62, 0xfc, 0x83, 0x89, 0x26,
	0x7a, 0x37, 0x45, 0x17, 0xc3, 0x80, 0xfd, 0x71, 0x22, 0x86, 0x17, 0xe6, 0x61, 0xf9, 0x9d, 0x1e,
	0x0c, 0xda, 0xb7, 0x8b, 0x61, 0xba, 0x02, 0xa2, 0x45, 0x19, 0x30, 0x15, 0x1c, 0x10, 0xef, 0xa8,
	0xd2, 0x19, 0x02, 0x41, 0x9b, 0x9f, 0x11, 0xc2, 0xc5, 0x85, 0x61, 0x04, 0xec, 0xcc, 0x63, 0xcb,
	0x58, 0xfb, 0x30, 0x7b, 0x58, 0x7e, 0x96, 0x45, 0x99, 0x92, 0x53, 0xc4, 0x15, 0x84, 0xd2, 0x3c,
	0xca, 0x95, 0x2d, 0xfc, 0xb7, 0x8a, 0xe0, 0x7b, 0xbe, 0x07, 0x32, 0x6d, 0xe3, 0xb4, 0xe5, 0xa9,
	0x47, 0x78, 0x08, 0x42, 0x7f, 0x29, 0x10, 0xce, 0x7a, 0xe7, 0x7f, 0xfb, 0xe1, 0x3b, 0xa5, 0x73,
	0xcb, 0x4e, 0xd1, 0x29, 0x2e, 0x98, 0x56, 0x69, 0x92, 0x86, 0x61, 0xe0, 0xeb, 0xdd, 0x5f, 0xf8,
	0xbf, 0xe4, 0x6c, 0xb5, 0x4f, 0x52, 0xdd, 0x89, 0x87, 0x49, 0x11, 0xff, 0x0f, 0xdd, 0x1f, 0x34,
	0x4c, 0xf4, 0xd0, 0xaa, 0x71, 0xef, 0x20, 0x1e, 0x28, 0x2d, 0x1a, 0xe8, 0x2e, 0x8a, 0x1f, 0x16,
	0x17, 0xc4, 0xe3, 0xa0, 0xa7, 0x4c, 0x8b, 0x2a, 0xb7, 0x99, 0xb8, 0xc0, 0xc3, 0x10, 0xdc, 0x58,
	0x9d, 0xfa, 0x3a, 0xd5, 0x5b, 0xf1, 0x01, 0xcb, 0xf8, 0x06, 0x5a, 0x3f, 0xf9, 0x80, 0x4e, 0x20,
	0x97, 0x33, 0x45, 0x7d, 0x26, 0x13, 0x6d, 0x24, 0x41, 0xcc, 0x25, 0x08, 0x3c, 0x60, 0xca, 0xa7,
	0x81, 0x74, 0xaa, 0x95, 0x38, 0xda, 0x35, 0xbc, 0x85, 0x36, 0xfb, 0xa3, 0xc5, 0xf6, 0xdd, 0x50,
	0x4d, 0xba, 0x07, 0x24, 0x04, 0xd1, 0xf2, 0xa5, 0x8c, 0xa7, 0xb5, 0xe2, 0x84, 0x26, 0x15, 0x3e,
	0x32, 0x27, 0x9d, 0xea, 0x4f, 0x9f, 0xa6, 0xd5, 0x9b, 0x28, 0xf3, 0xe7, 0x62, 0x11, 0xff, 0x03,
	0xfd, 0xfd, 0xa8, 0x0b, 0x65, 0x24, 0x62, 0x1d, 0x02, 0x20, 0x04, 0x17, 0x84, 0xbb, 0x6e, 0x24,
	0x62, 0x5c, 0x3a, 0xa2, 0x04, 0xb1, 0x07, 0x82, 0x48, 0xdf, 0x03, 0xe7, 0xc1, 0x73, 0x0b, 0x3d,
	0xb3, 0x3a, 0xed, 0xf5, 0xc4, 0xca, 0x65, 0xf0, 0x23, 0xb3, 0x9c, 0x26, 0xc9, 0x8f, 0x57, 0x56,
	0xc6, 0x59, 0x08, 0x90, 0x4a, 0xf8, 0x49, 0xfc, 0xf8, 0x42, 0x91, 0x6a, 0xc6, 0x68, 0xdc, 0x64,
	0xd4, 0xc5, 0xf7, 0x97, 0x0e, 0xb9, 0xd7, 0x84, 0x5e, 0x45, 0x7c, 0xf7, 0x50, 0xf0, 0x24, 0x68,
	0x9d, 0x07, 0x01, 0xdf, 0xd7, 0x04, 0xe2, 0x43, 0xb9, 0xf0, 0x5f, 0xd7, 0x16, 0xeb, 0xdc, 0x03,
	0x52, 0x0f, 0xf8, 0xbe, 0x33, 0x3f, 0x52, 0xca, 0xc5, 0xed, 0x1b, 0x87, 0x58, 0x1d, 0x4b, 0x3e,
	0x27, 0xf9, 0x2e, 0xb0, 0xb5, 0x16, 0xba, 0x36, 0x74, 0x71, 0xe0, 0xc9, 0xfb, 0x7e, 0x77, 0x4e,
	0xc7, 0xff, 0x1c, 0xa2, 0xeb, 0xc3, 0x1f, 0x0d, 0xc6, 0xb7, 0x29, 0xa3, 0x0d, 0xe8, 0xf5, 0xfb,
	0x97, 0x59, 0x31, 0x1e, 0xa4, 0x5f, 0xd6, 0x8f, 0x4c, 0xe3, 0xb1, 0x69, 0x3c, 0x35, 0x8d, 0xf7,
	0x4d, 0xe3, 0x0b, 0xd3, 0xf8, 0xce, 0x34, 0x3e, 0xb5, 0x8c, 0x5a, 0x36, 0x19, 0x07, 0xd7, 0x7e,
	0x0c, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x4e, 0xad, 0x25, 0xb1, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BranchServiceClient is the client API for BranchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BranchServiceClient interface {
	// GetBranch retrieves the details of a specific branch information, selected by its ID.
	GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*Branch, error)
	// GetBranches get all the available branch.
	GetBranches(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBranchesResponse, error)
	// CreateBranch creates a new branch and returns its id.
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error)
	// UpdateBranch updates a branch.
	UpdateBranch(ctx context.Context, in *UpdateBranchRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteBranch deletes a branch.
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type branchServiceClient struct {
	cc *grpc.ClientConn
}

func NewBranchServiceClient(cc *grpc.ClientConn) BranchServiceClient {
	return &branchServiceClient{cc}
}

func (c *branchServiceClient) GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*Branch, error) {
	out := new(Branch)
	err := c.cc.Invoke(ctx, "/branch.BranchService/GetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) GetBranches(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBranchesResponse, error) {
	out := new(GetBranchesResponse)
	err := c.cc.Invoke(ctx, "/branch.BranchService/GetBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error) {
	out := new(CreateBranchResponse)
	err := c.cc.Invoke(ctx, "/branch.BranchService/CreateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) UpdateBranch(ctx context.Context, in *UpdateBranchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/branch.BranchService/UpdateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/branch.BranchService/DeleteBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranchServiceServer is the server API for BranchService service.
type BranchServiceServer interface {
	// GetBranch retrieves the details of a specific branch information, selected by its ID.
	GetBranch(context.Context, *GetBranchRequest) (*Branch, error)
	// GetBranches get all the available branch.
	GetBranches(context.Context, *empty.Empty) (*GetBranchesResponse, error)
	// CreateBranch creates a new branch and returns its id.
	CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error)
	// UpdateBranch updates a branch.
	UpdateBranch(context.Context, *UpdateBranchRequest) (*empty.Empty, error)
	// DeleteBranch deletes a branch.
	DeleteBranch(context.Context, *DeleteBranchRequest) (*empty.Empty, error)
}

// UnimplementedBranchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBranchServiceServer struct {
}

func (*UnimplementedBranchServiceServer) GetBranch(ctx context.Context, req *GetBranchRequest) (*Branch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}
func (*UnimplementedBranchServiceServer) GetBranches(ctx context.Context, req *empty.Empty) (*GetBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranches not implemented")
}
func (*UnimplementedBranchServiceServer) CreateBranch(ctx context.Context, req *CreateBranchRequest) (*CreateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (*UnimplementedBranchServiceServer) UpdateBranch(ctx context.Context, req *UpdateBranchRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranch not implemented")
}
func (*UnimplementedBranchServiceServer) DeleteBranch(ctx context.Context, req *DeleteBranchRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}

func RegisterBranchServiceServer(s *grpc.Server, srv BranchServiceServer) {
	s.RegisterService(&_BranchService_serviceDesc, srv)
}

func _BranchService_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branch.BranchService/GetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).GetBranch(ctx, req.(*GetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_GetBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).GetBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branch.BranchService/GetBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).GetBranches(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branch.BranchService/CreateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_UpdateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).UpdateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branch.BranchService/UpdateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).UpdateBranch(ctx, req.(*UpdateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branch.BranchService/DeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BranchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "branch.BranchService",
	HandlerType: (*BranchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBranch",
			Handler:    _BranchService_GetBranch_Handler,
		},
		{
			MethodName: "GetBranches",
			Handler:    _BranchService_GetBranches_Handler,
		},
		{
			MethodName: "CreateBranch",
			Handler:    _BranchService_CreateBranch_Handler,
		},
		{
			MethodName: "UpdateBranch",
			Handler:    _BranchService_UpdateBranch_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _BranchService_DeleteBranch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/openbank/openbank/v1/branch/all.proto",
}
