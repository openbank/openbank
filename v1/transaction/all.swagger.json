{
  "swagger": "2.0",
  "info": {
    "title": "Transactions API",
    "description": "Provides create and read operations on the transaction resource.",
    "version": "1.0.0"
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/accounts/{AccountID}/transactions": {
      "get": {
        "summary": "List all transactions for given account id",
        "description": "Returns a list containing up to 20 transactions. You can paginate through transactions by supplying next_starting_index in your subsequents calls. next_starting_index contains the transaction_id of the last transaction_id of the current page.",
        "operationId": "GetTransactionsByAccount",
        "responses": {
          "200": {
            "description": "Request executed successfully.",
            "schema": {
              "$ref": "#/definitions/transactionsGetTransactionsByAccountResponse"
            }
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource is not found.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "AccountID",
            "description": "AccountID is the unique identifier of an account.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "FromDate",
            "description": "FromDate is starting date to get the transactions.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ToDate",
            "description": "ToDate is end date to get the transactions.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "TransactionType",
            "description": "TransactionType is a type of transaction, debit or credit.\n\n - Credit: Type_Credit is the value for a credit transaction.\n - Debit: Type_Debit is the value for a debit transaction.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UnknownType",
              "Credit",
              "Debit"
            ],
            "default": "UnknownType"
          },
          {
            "name": "Limit",
            "description": "Limit is number of search return of transactions.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "NextStartingIndex",
            "description": "NextStartingIndex is a cursor for pagination. It's a TransactionID that defines\nthe current place in the total list of Transaction.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "OAuth2": [
              "https://auth.bnk.to/transaction.read"
            ]
          }
        ]
      }
    },
    "/v1/transactions": {
      "get": {
        "summary": "List all transactions",
        "description": "Returns a list containing up to 20 transactions. You can paginate through transactions by supplying next_starting_index in your subsequents calls. next_starting_index contains the transaction_id of the last transaction_id of the current page.",
        "operationId": "GetTransactions",
        "responses": {
          "200": {
            "description": "Request executed successfully.",
            "schema": {
              "$ref": "#/definitions/transactionsGetTransactionsResponse"
            }
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource is not found.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "FromDate",
            "description": "FromDate is starting date to get the transactions.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ToDate",
            "description": "ToDate is end date to get the transactions.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "TransactionType",
            "description": "TransactionType is a type of transaction, debit or credit.\n\n - Credit: Type_Credit is the value for a credit transaction.\n - Debit: Type_Debit is the value for a debit transaction.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UnknownType",
              "Credit",
              "Debit"
            ],
            "default": "UnknownType"
          },
          {
            "name": "Limit",
            "description": "Limit is number of search return of transactions.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "NextStartingIndex",
            "description": "NextStartingIndex is a cursor for pagination. It's a TransactionID that defines\nthe current place in the total list of Transaction.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "OAuth2": [
              "https://auth.bnk.to/transaction.read"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a transaction",
        "description": "Creates a new transaction and returns its id.",
        "operationId": "CreateTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/transactionsCreateTransactionResponse"
            }
          },
          "201": {
            "description": "Transaction created successfully.",
            "schema": {
              "$ref": "#/definitions/transactionsCreateTransactionResponse"
            }
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource is not found.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transactionsCreateTransactionRequest"
            }
          }
        ],
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "OAuth2": [
              "https://auth.bnk.to/transaction.write"
            ]
          }
        ]
      }
    },
    "/v1/transactions/approval": {
      "post": {
        "summary": "Approve a pending transaction",
        "description": "Approve a pending transaction.",
        "operationId": "ApprovePayment",
        "responses": {
          "200": {
            "description": "Transaction successfully approved.",
            "schema": {
              "$ref": "#/definitions/transactionsApprovePaymentResponse"
            }
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource is not found.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transactionsApprovePaymentRequest"
            }
          }
        ],
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "OAuth2": [
              "https://auth.bnk.to/transaction.write"
            ]
          }
        ]
      }
    },
    "/v1/transactions/confirmation": {
      "post": {
        "summary": "Authorize a transaction with 2FA",
        "description": "Authorization allows execution of transactions with 2-factor authentication (2FA).",
        "operationId": "TFA",
        "responses": {
          "200": {
            "description": "Transaction authorized.",
            "schema": {
              "$ref": "#/definitions/transactionsTFAResponse"
            }
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource is not found.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transactionsTFARequest"
            }
          }
        ],
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "OAuth2": [
              "https://auth.bnk.to/transaction.write"
            ]
          }
        ]
      }
    },
    "/v1/transactions/{TransactionID}": {
      "get": {
        "summary": "Retrieve a transaction",
        "description": "Retrieves all data from a transaction, selected by the transaction_id you supplied.",
        "operationId": "GetTransaction",
        "responses": {
          "200": {
            "description": "Request executed successfully.",
            "schema": {
              "$ref": "#/definitions/transactionsTransaction"
            }
          },
          "400": {
            "description": "Returned when the request body is malformatted or does not match the expected request.",
            "schema": {}
          },
          "401": {
            "description": "Returned when the request does not contains the user's credentials.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource is not found.",
            "schema": {}
          },
          "500": {
            "description": "Returned when an unexpected error occured on the server side.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "TransactionID",
            "description": "TransactionID is the unique identifier of a transaction.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "OAuth2": [
              "https://auth.bnk.to/transaction.read"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "transactionsApprovePaymentRequest": {
      "type": "object",
      "properties": {
        "TransactionID": {
          "type": "string",
          "description": "TransactionID is the transaction unique identifier."
        },
        "Approve": {
          "type": "boolean",
          "format": "boolean",
          "description": "Approve is Boolean value of approval action."
        },
        "TFAType": {
          "$ref": "#/definitions/transactionsTFAType",
          "description": "TFAType is type to receive OTP authentication code."
        }
      },
      "description": "ApprovePaymentRequest is the request message to approve a pending transaction."
    },
    "transactionsApprovePaymentResponse": {
      "type": "object",
      "properties": {
        "AuthorizationID": {
          "type": "string",
          "title": "AuthorizationID is the executable code is obtained from\nthe payment feedback result"
        },
        "SMSCode": {
          "type": "string",
          "format": "int64",
          "description": "SMSCode is the OTP code used for testing."
        }
      },
      "description": "ApprovePaymentResponse is the response message for approving a pending transaction."
    },
    "transactionsBankAccountInfo": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "AccountID is the identifier of the account."
        },
        "BankCode": {
          "type": "string",
          "description": "BankCode is code of the bank the account belongs to."
        },
        "OwnerName": {
          "type": "string",
          "description": "OwnerName is the name of the owner of the account."
        },
        "MajorType": {
          "$ref": "#/definitions/typesMajorType",
          "description": "MajorType is the type of account."
        }
      },
      "description": "BankAccountInfo holds lightweight account information."
    },
    "transactionsCreateTransactionRequest": {
      "type": "object",
      "properties": {
        "SourceAccountID": {
          "type": "string",
          "description": "SourceAccountID is the identifier of the account emitting the transaction."
        },
        "SourceOfflineUser": {
          "$ref": "#/definitions/typesOfflineUserInfo",
          "description": "SourceOfflineUser is the contact information for an offline user."
        },
        "DestinationAccount": {
          "$ref": "#/definitions/transactionsBankAccountInfo",
          "description": "DestinationAccount is the account receiving the transaction."
        },
        "DestinationOfflineUser": {
          "$ref": "#/definitions/typesOfflineUserInfo",
          "description": "DestinationOfflineUser is the contact information for an offline user."
        },
        "Amount": {
          "$ref": "#/definitions/typesAmount",
          "description": "Amount holds the amount value and currency of the transaction."
        },
        "Remarks": {
          "type": "string",
          "description": "Remarks is an informational note about the transaction."
        }
      },
      "description": "CreateTransactionRequest is the request message for creating a transaction.\nOnly one of SourceOfflineUser and DestinationOfflineUser can be used to create a transaction."
    },
    "transactionsCreateTransactionResponse": {
      "type": "object",
      "properties": {
        "TransactionID": {
          "type": "string",
          "description": "TransactionID is the unique identifier of a transaction."
        },
        "CratedAt": {
          "type": "string",
          "description": "CreatedAt is the transaction created date."
        }
      },
      "description": "CreateTransactionResponse is the response message for a transaction creation."
    },
    "transactionsGetTransactionsByAccountResponse": {
      "type": "object",
      "properties": {
        "Result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/transactionsTransaction"
          },
          "description": "Result is a list containing up to 20 transactions."
        },
        "HasMore": {
          "type": "boolean",
          "format": "boolean",
          "description": "HasMore indicates if there are more transactions available."
        },
        "LastRunningBalance": {
          "$ref": "#/definitions/typesAmount",
          "description": "LastRunningBalance is current balance for related account."
        }
      },
      "description": "GetTransactionsByAccountResponse is the response message for retrieving a list of transactions."
    },
    "transactionsGetTransactionsResponse": {
      "type": "object",
      "properties": {
        "Result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/transactionsTransaction"
          },
          "description": "Result is a list containing up to 20 transactions."
        },
        "HasMore": {
          "type": "boolean",
          "format": "boolean",
          "description": "HasMore indicates if there are more transactions available."
        },
        "LastRunningBalance": {
          "$ref": "#/definitions/typesAmount",
          "description": "LastRunningBalance is current balance for related account."
        }
      },
      "description": "GetTransactionsResponse is the response message for retrieving a list of transactions."
    },
    "transactionsStatus": {
      "type": "string",
      "enum": [
        "UnknownStatus",
        "Success",
        "Pending",
        "Rejected"
      ],
      "default": "UnknownStatus",
      "description": "Status defines the status of a transaction.\n\n - Success: Status_Success is the value for a successful transaction.\n - Pending: Status_Pending is the value for a pending transaction.\n - Rejected: Status_Rejected is the value for a rejected transaction."
    },
    "transactionsTFARequest": {
      "type": "object",
      "properties": {
        "TransactionID": {
          "type": "string",
          "description": "TransactionID is transaction / payment identification code requires approval."
        },
        "Code": {
          "type": "string",
          "description": "Code is 2-digit authentication code is sent via SMS."
        },
        "AuthorizationID": {
          "type": "string",
          "description": "AuthorizationID is the executable code is obtained from the payment feedback result."
        },
        "TFAType": {
          "$ref": "#/definitions/transactionsTFAType",
          "description": "TFAType is type to receive OTP authentication code."
        }
      },
      "description": "TFARequest is request message for conducting 2FA."
    },
    "transactionsTFAResponse": {
      "type": "object",
      "properties": {
        "TraceNumber": {
          "type": "string",
          "description": "TraceNumber is the transaction reference code."
        }
      },
      "description": "TFAResponse is the response message for a 2FA request."
    },
    "transactionsTFAType": {
      "type": "string",
      "enum": [
        "_",
        "SMS",
        "SAFEKEY"
      ],
      "default": "_",
      "description": "TFAType is available type of TFA.\n\n - SMS: TFAType_SMS Message.\n - SAFEKEY: TFAType_SAFEKEY Application."
    },
    "transactionsTransaction": {
      "type": "object",
      "properties": {
        "TransactionID": {
          "type": "string",
          "description": "TransactionID is the unique identifier of a transaction."
        },
        "SourceAccount": {
          "$ref": "#/definitions/transactionsBankAccountInfo",
          "description": "SourceAccount is the account emitting the transaction."
        },
        "SourceOfflineUser": {
          "$ref": "#/definitions/typesOfflineUserInfo",
          "description": "SourceOfflineUser is the contact information for an offline user."
        },
        "DestinationAccount": {
          "$ref": "#/definitions/transactionsBankAccountInfo",
          "description": "DestinationAccount is the account receiving the transaction."
        },
        "DestinationOfflineUser": {
          "$ref": "#/definitions/typesOfflineUserInfo",
          "description": "DestinationOfflineUser is the contact information for an offline user."
        },
        "Date": {
          "type": "string",
          "format": "date-time",
          "description": "Date is the date of the transaction."
        },
        "Type": {
          "$ref": "#/definitions/transactionsType",
          "description": "Type is the type of transaction."
        },
        "Status": {
          "$ref": "#/definitions/transactionsStatus",
          "description": "Status is the status of the transaction."
        },
        "Amount": {
          "$ref": "#/definitions/typesAmount",
          "description": "Amount holds the amount value and currency of the transaction."
        },
        "Description": {
          "type": "string",
          "description": "Description describes the transaction."
        },
        "UserID": {
          "type": "string",
          "description": "UserID is the identifier of the issuer of the transaction."
        },
        "Remarks": {
          "type": "string",
          "description": "Remarks is an informational note about the transaction."
        }
      },
      "description": "Transaction holds all details about a transaction."
    },
    "transactionsType": {
      "type": "string",
      "enum": [
        "UnknownType",
        "Credit",
        "Debit"
      ],
      "default": "UnknownType",
      "description": "Type defines the type of a transaction.\n\n - Credit: Type_Credit is the value for a credit transaction.\n - Debit: Type_Debit is the value for a debit transaction."
    },
    "typesAmount": {
      "type": "object",
      "properties": {
        "Cur": {
          "type": "string",
          "description": "Cur is the currency of the amount."
        },
        "Num": {
          "type": "string",
          "description": "Num is the value of the amount."
        }
      },
      "description": "Amount defines a transaction amount."
    },
    "typesLocation": {
      "type": "object",
      "properties": {
        "Latitude": {
          "type": "number",
          "format": "double",
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
        },
        "Longitude": {
          "type": "number",
          "format": "double",
          "title": "The longitude in degrees. It must be in the range [-180.0, +180.0]"
        }
      },
      "description": "Location is An object representing a latitude/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude.\nValues must be within normalized ranges.\nRefer to https://godoc.org/google.golang.org/genproto/googleapis/type/latlng."
    },
    "typesMajorType": {
      "type": "string",
      "enum": [
        "UnknownMajorType",
        "Checking",
        "Saving",
        "TimeDeposit",
        "CommercialLoan",
        "MortgageLoan",
        "ConsumerLoan"
      ],
      "default": "UnknownMajorType",
      "description": "MajorType describes the type of the account.\n\n - Checking: MajorType_Checking account.\n - Saving: MajorType_Saving account.\n - TimeDeposit: MajorType_TimeDeposit for a time deposit account.\n - CommercialLoan: MajorType_CommercialLoan for a business loan account.\n - MortgageLoan: MajorType_MortgageLoan for a home loan account.\n - ConsumerLoan: MajorType_ConsumerLoan for a consumer loan account."
    },
    "typesOfflineUserInfo": {
      "type": "object",
      "properties": {
        "UserID": {
          "type": "string",
          "title": "UserID"
        },
        "FirstName": {
          "type": "string",
          "title": "FirstName of the person"
        },
        "MiddleName": {
          "type": "string",
          "title": "MiddleName or middle names (space separated) of the person"
        },
        "LastName": {
          "type": "string",
          "title": "LastName or last names (space separated) of the person"
        },
        "MobileNo": {
          "type": "string",
          "title": "MobileNo contact of the person"
        },
        "Location": {
          "$ref": "#/definitions/typesLocation",
          "description": "Location is the physical location of the interaction."
        }
      }
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "description": "Access to transaction resources is restricted to authenticated users. The authentication process follows the Authorization Code flow.",
      "flow": "accessCode",
      "authorizationUrl": "/v1/auth",
      "tokenUrl": "/v1/token",
      "scopes": {
        "https://auth.bnk.to/transaction.read": "View transaction data",
        "https://auth.bnk.to/transaction.write": "Manage transaction data"
      }
    }
  }
}
