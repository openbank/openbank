// +gunk openapiv2.Swagger{
//         Swagger: "2.0",
//         Info: openapiv2.Info{
//                 Title:       "Transactions API",
//                 Description: "Provides create and read operations on the transaction resource.",
//                 Version:     "1.0.0",
//         },
//         Schemes: []openapiv2.SwaggerScheme{
//                 openapiv2.HTTPS,
//         },
//         Consumes: []string{
//                 "application/json",
//         },
//         Produces: []string{
//                 "application/json",
//         },
//         Responses: map[string]openapiv2.Response{
//                 "400": openapiv2.Response{
//                         Description: "Returned when the request body is malformatted or does not match the expected request.",
//                 },
//                 "401": openapiv2.Response{
//                         Description: "Returned when the request does not contains the user's credentials.",
//                 },
//                 "403": openapiv2.Response{
//                         Description: "Returned when the user does not have permission to access the resource.",
//                 },
//                 "404": openapiv2.Response{
//                         Description: "Returned when the resource is not found.",
//                 },
//                 "500": openapiv2.Response{
//                         Description: "Returned when an unexpected error occured on the server side.",
//                 },
//         },
//         SecurityDefinitions: openapiv2.SecurityDefinitions{
//                 Security: map[string]openapiv2.SecurityScheme{
//                         "OAuth2": openapiv2.SecurityScheme{
//                                 Type:             openapiv2.TYPE_OAUTH2,
//                                 Flow:             openapiv2.FLOW_ACCESS_CODE,
//                                 Description:      "Access to transaction resources is restricted to authenticated users. The authentication process follows the Authorization Code flow.",
//                                 AuthorizationURL: "/v1/auth",
//                                 TokenURL:         "/v1/token",
//                                 Scopes: openapiv2.Scopes{
//                                         Scope: map[string]string{
//                                                 "https://auth.bnk.to/transaction.read":  "View transaction data",
//                                                 "https://auth.bnk.to/transaction.write": "Manage transaction data",
//                                         },
//                                 },
//                         },
//                 },
//         },
// }
package transactions

import (
	"time"

	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"

	types "github.com/openbank/openbank/v1/types"
)

// Type defines the type of a transaction.
type Type int

const (
	UnknownType Type = iota

	// Credit is the value for a credit transaction.
	Credit

	// Debit is the value for a debit transaction.
	Debit
)

// Status defines the status of a transaction.
type Status int

const (
	UnknownStatus Status = iota

	// Success is the value for a successful transaction.
	Success

	// Pending is the value for a pending transaction.
	Pending

	// Rejected is the value for a rejected transaction.
	Rejected
)

// Transaction holds all details about a transaction.
type Transaction struct {
	// TransactionID is the unique identifier of a transaction.
	TransactionID string `pb:"1" json:"transaction_id"`

	// SourceAccount is the account emitting the transaction.
	SourceAccount BankAccountInfo `pb:"2" json:"source_account"`

	// SourceOfflineUser is the contact information for an offline user.
	SourceOfflineUser types.OfflineUserInfo `pb:"11" json:"source_offline_user"`

	// DestinationAccount is the account receiving the transaction.
	DestinationAccount BankAccountInfo `pb:"3" json:"destination_account"`

	// DestinationOfflineUser is the contact information for an offline user.
	DestinationOfflineUser types.OfflineUserInfo `pb:"12" json:"destination_offline_user"`

	// Date is the date of the transaction.
	Date time.Time `pb:"4" json:"date"`

	// Type is the type of transaction.
	Type Type `pb:"5" json:"type"`

	// Status is the status of the transaction.
	Status Status `pb:"6" json:"status"`

	// Amount holds the amount value and currency of the transaction.
	Amount types.Amount `pb:"7" json:"amount"`

	// Description describes the transaction.
	Description string `pb:"8" json:"description"`

	// UserID is the identifier of the issuer of the transaction.
	UserID string `pb:"9" json:"user_id"`

	// Remarks is an informational note about the transaction.
	Remarks string `pb:"10" json:"remarks"`
}

// BankAccountInfo holds lightweight account information.
type BankAccountInfo struct {
	// AccountID is the identifier of the account.
	AccountID string `pb:"1" json:"account_id"`

	// BankCode is code of the bank the account belongs to.
	BankCode string `pb:"2" json:"bank_code"`

	// OwnerName is the name of the owner of the account.
	OwnerName string `pb:"3" json:"owner_name"`

	// MajorType is the type of account.
	MajorType types.MajorType `pb:"4" json:"major_type"`
}

// GetTransactionRequest is the request message to get an transaction by its identifier.
type GetTransactionRequest struct {
	// TransactionID is the unique identifier of a transaction.
	TransactionID string `pb:"1" json:"transaction_id"`
}

// GetTransactionsRequest is the request message to get a list of transactions.
type GetTransactionsRequest struct {
	// FromDate is starting date to get the transactions.
	FromDate time.Time `pb:"1" json:"from_date"`

	// ToDate is end date to get the transactions.
	ToDate time.Time `pb:"2" json:"to_date"`

	// TransactionType is a type of transaction, debit or credit.
	TransactionType Type `pb:"3" json:"transaction_type"`

	// Limit is number of search return of transactions.
	Limit string `pb:"4" json:"limit"`

	// NextStartingIndex is a cursor for pagination. It's a TransactionID that defines
	// the current place in the total list of Transaction.
	NextStartingIndex string `pb:"5" json:"next_starting_index"`
}

// GetTransactionsResponse is the response message for retrieving a list of transactions.
type GetTransactionsResponse struct {
	// Result is a list containing up to 20 transactions.
	Result []Transaction `pb:"1" json:"result"`

	// HasMore indicates if there are more transactions available.
	HasMore bool `pb:"2" json:"has_more"`

	// LastRunningBalance is current balance for related account.
	LastRunningBalance types.Amount `pb:"3" json:"last_running_balance"`
}

// GetTransactionsByAccountRequest is the request message to get a list of transactions.
type GetTransactionsByAccountRequest struct {

	// AccountID is the unique identifier of an account.
	AccountID string `pb:"1" json:"account_id"`

	// FromDate is starting date to get the transactions.
	FromDate time.Time `pb:"2" json:"from_date"`

	// ToDate is end date to get the transactions.
	ToDate time.Time `pb:"3" json:"to_date"`

	// TransactionType is a type of transaction, debit or credit.
	TransactionType Type `pb:"4" json:"transaction_type"`

	// Limit is number of search return of transactions.
	Limit string `pb:"5" json:"limit"`

	// NextStartingIndex is a cursor for pagination. It's a TransactionID that defines
	// the current place in the total list of Transaction.
	NextStartingIndex string `pb:"6" json:"next_starting_index"`
}

// GetTransactionsByAccountResponse is the response message for retrieving a list of transactions.
type GetTransactionsByAccountResponse struct {
	// Result is a list containing up to 20 transactions.
	Result []Transaction `pb:"1" json:"result"`

	// HasMore indicates if there are more transactions available.
	HasMore bool `pb:"2" json:"has_more"`

	// LastRunningBalance is current balance for related account.
	LastRunningBalance types.Amount `pb:"3" json:"last_running_balance"`
}

// CreateTransactionRequest is the request message for creating a transaction.
// Only one of SourceOfflineUser and DestinationOfflineUser can be used to create a transaction.
type CreateTransactionRequest struct {
	// SourceAccountID is the identifier of the account emitting the transaction.
	SourceAccountID string `pb:"1" json:"source_account_id"`

	// SourceOfflineUser is the contact information for an offline user.
	SourceOfflineUser types.OfflineUserInfo `pb:"5" json:"source_offline_user"`

	// DestinationAccount is the account receiving the transaction.
	DestinationAccount BankAccountInfo `pb:"2" json:"destination_account"`

	// DestinationOfflineUser is the contact information for an offline user.
	DestinationOfflineUser types.OfflineUserInfo `pb:"6" json:"destination_offline_user"`

	// Amount holds the amount value and currency of the transaction.
	Amount types.Amount `pb:"3" json:"amount"`

	// Remarks is an informational note about the transaction.
	Remarks string `pb:"4" json:"remarks"`
}

// CreateTransactionResponse is the response message for a transaction creation.
type CreateTransactionResponse struct {
	// TransactionID is the unique identifier of a transaction.
	TransactionID string `pb:"1" json:"transaction_id"`

	// CreatedAt is the transaction created date.
	CratedAt string `pb:"2" json:"created_at"`
}

// TFAType is available type of TFA.
type TFAType int

const (
	_ TFAType = iota

	// SMS Message.
	SMS

	// SAFEKEY Application.
	SAFEKEY
)

// ApprovePaymentRequest is the request message to approve a pending transaction.
type ApprovePaymentRequest struct {
	// TransactionID is the transaction unique identifier.
	TransactionID string `pb:"1" json:"transaction_id"`

	// Approve is Boolean value of approval action.
	Approve bool `pb:"2" json:"approve"`

	// TFAType is type to receive OTP authentication code.
	TFAType TFAType `pb:"3" json:"tfa_type"`
}

// ApprovePaymentResponse is the response message for approving a pending transaction.
type ApprovePaymentResponse struct {
	// AuthorizationID is the executable code is obtained from
	// the payment feedback result
	AuthorizationID string `pb:"1" json:"authorization_id"`

	// SMSCode is the OTP code used for testing.
	SMSCode int64 `pb:"2" json:"sms_code"`
}

// TFARequest is request message for conducting 2FA.
type TFARequest struct {
	// TransactionID is transaction / payment identification code requires approval.
	TransactionID string `pb:"1" json:"transaction_id"`

	// Code is 2-digit authentication code is sent via SMS.
	Code string `pb:"2" json:"code"`

	// AuthorizationID is the executable code is obtained from the payment feedback result.
	AuthorizationID string `pb:"3" json:"authorization_id"`

	// TFAType is type to receive OTP authentication code.
	TFAType TFAType `pb:"4" json:"tfa_type"`
}

// TFAResponse is the response message for a 2FA request.
type TFAResponse struct {
	// TraceNumber is the transaction reference code.
	TraceNumber string `pb:"1" json:"trace_number"`
}

// TransactionService provides Transacton operations.
type TransactionService interface {
	// GetTransaction retrieves the detail of a transaction, selected by its id.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/transactions/{TransactionID}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Transaction"},
	//         Description: "Retrieves all data from a transaction, selected by the transaction_id you supplied.",
	//         Summary:     "Retrieve a transaction",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/transactionsTransaction",
	//                                 },
	//                         },
	//                 },
	//                 "404": openapiv2.Response{
	//                         Description: "Returned when the resource is not found.",
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/transaction.read",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	GetTransaction(GetTransactionRequest) Transaction

	// GetTransactions returns a list containing up to 20 transactions.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/transactions",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Transaction"},
	//         Description: "Returns a list containing up to 20 transactions. You can paginate through transactions by supplying next_starting_index in your subsequents calls. next_starting_index contains the transaction_id of the last transaction_id of the current page.",
	//         Summary:     "List all transactions",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/transactionsGetTransactionsResponse",
	//                                 },
	//                         },
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/transaction.read",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	GetTransactions(GetTransactionsRequest) GetTransactionsResponse

	// GetTransactionsByAccount returns a list containing up to 20 transactions.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/accounts/{AccountID}/transactions",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Transaction"},
	//         Description: "Returns a list containing up to 20 transactions. You can paginate through transactions by supplying next_starting_index in your subsequents calls. next_starting_index contains the transaction_id of the last transaction_id of the current page.",
	//         Summary:     "List all transactions for given account id",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/transactionsGetTransactionsByAccountResponse",
	//                                 },
	//                         },
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/transaction.read",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	GetTransactionsByAccount(GetTransactionsByAccountRequest) GetTransactionsByAccountResponse

	// CreateTransaction creates a new transaction and returns its id.
	//
	// +gunk http.Match{
	//         Method: "POST",
	//         Path:   "/v1/transactions",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Transaction"},
	//         Description: "Creates a new transaction and returns its id.",
	//         Summary:     "Create a transaction",
	//         Responses: map[string]openapiv2.Response{
	//                 "201": openapiv2.Response{
	//                         Description: "Transaction created successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/transactionsCreateTransactionResponse",
	//                                 },
	//                         },
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/transaction.write",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	CreateTransaction(CreateTransactionRequest) CreateTransactionResponse

	// ApprovePayment approves a pending transaction.
	//
	// +gunk http.Match{
	//         Method: "POST",
	//         Path:   "/v1/transactions/approval",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Transaction"},
	//         Description: "Approve a pending transaction.",
	//         Summary:     "Approve a pending transaction",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Transaction successfully approved.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/transactionsApprovePaymentResponse",
	//                                 },
	//                         },
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/transaction.write",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	ApprovePayment(ApprovePaymentRequest) ApprovePaymentResponse

	// TFA does 2FA verification for an approved transaction.
	//
	// +gunk http.Match{
	//         Method: "POST",
	//         Path:   "/v1/transactions/confirmation",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Transaction"},
	//         Description: "Authorization allows execution of transactions with 2-factor authentication (2FA).",
	//         Summary:     "Authorize a transaction with 2FA",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Transaction authorized.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/transactionsTFAResponse",
	//                                 },
	//                         },
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/transaction.write",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	TFA(TFARequest) TFAResponse
}
