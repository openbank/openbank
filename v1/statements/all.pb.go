// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/openbank/openbank/v1/statements/all.proto

package statements

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	types "github.com/openbank/openbank/v1/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Status define the status of a statment.
type Status int32

const (
	Status_UnknownStatus Status = 0
	// Status_Received is the value for a received statment.
	Status_Received Status = 1
	// Status_Pending is the value for a pending statement.
	Status_Pending Status = 2
)

var Status_name = map[int32]string{
	0: "UnknownStatus",
	1: "Received",
	2: "Pending",
}

var Status_value = map[string]int32{
	"UnknownStatus": 0,
	"Received":      1,
	"Pending":       2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e1cebb344c4e7431, []int{0}
}

type Statement struct {
	// ID is the unique identifier of a statement.
	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	// Status is the status of the statement.
	Status Status `protobuf:"varint,2,opt,name=Status,json=status,proto3,enum=statements.Status" json:"Status,omitempty"`
	// Date is the date of the statement.
	Date string `protobuf:"bytes,3,opt,name=Date,json=date,proto3" json:"Date,omitempty"`
	// Description is the description of the statement.
	Description string `protobuf:"bytes,4,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	// Amount is the amount if the transcation that writes on the statement.
	Amount *types.Amount `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"Amount,omitempty"`
	// Balance is remaining balance after related transaction.
	Balance              *types.Amount `protobuf:"bytes,6,opt,name=Balance,json=balance,proto3" json:"Balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Statement) Reset()         { *m = Statement{} }
func (m *Statement) String() string { return proto.CompactTextString(m) }
func (*Statement) ProtoMessage()    {}
func (*Statement) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1cebb344c4e7431, []int{0}
}

func (m *Statement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Statement.Unmarshal(m, b)
}
func (m *Statement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Statement.Marshal(b, m, deterministic)
}
func (m *Statement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statement.Merge(m, src)
}
func (m *Statement) XXX_Size() int {
	return xxx_messageInfo_Statement.Size(m)
}
func (m *Statement) XXX_DiscardUnknown() {
	xxx_messageInfo_Statement.DiscardUnknown(m)
}

var xxx_messageInfo_Statement proto.InternalMessageInfo

func (m *Statement) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Statement) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UnknownStatus
}

func (m *Statement) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Statement) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Statement) GetAmount() *types.Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Statement) GetBalance() *types.Amount {
	if m != nil {
		return m.Balance
	}
	return nil
}

// GetStatementRequest is the request to get statement by its identifier
type GetStatementRequest struct {
	// ID is the unique identifier of the statement
	ID                   string   `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatementRequest) Reset()         { *m = GetStatementRequest{} }
func (m *GetStatementRequest) String() string { return proto.CompactTextString(m) }
func (*GetStatementRequest) ProtoMessage()    {}
func (*GetStatementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1cebb344c4e7431, []int{1}
}

func (m *GetStatementRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStatementRequest.Unmarshal(m, b)
}
func (m *GetStatementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStatementRequest.Marshal(b, m, deterministic)
}
func (m *GetStatementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatementRequest.Merge(m, src)
}
func (m *GetStatementRequest) XXX_Size() int {
	return xxx_messageInfo_GetStatementRequest.Size(m)
}
func (m *GetStatementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatementRequest proto.InternalMessageInfo

func (m *GetStatementRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// GetStatementsequest is the request to list of statements.
type GetStatementsRequest struct {
	// BankCode is a bank code to get related statement.
	BankCode types.BankCode `protobuf:"varint,1,opt,name=BankCode,json=bank_code,proto3,enum=types.BankCode" json:"BankCode,omitempty"`
	// PeriodDays is statement period to be query.
	PeriodDays int32 `protobuf:"varint,2,opt,name=PeriodDays,json=period_days,proto3" json:"PeriodDays,omitempty"`
	// Status is status of the statement to be query.
	Status               Status   `protobuf:"varint,3,opt,name=Status,json=status,proto3,enum=statements.Status" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatementsRequest) Reset()         { *m = GetStatementsRequest{} }
func (m *GetStatementsRequest) String() string { return proto.CompactTextString(m) }
func (*GetStatementsRequest) ProtoMessage()    {}
func (*GetStatementsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1cebb344c4e7431, []int{2}
}

func (m *GetStatementsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStatementsRequest.Unmarshal(m, b)
}
func (m *GetStatementsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStatementsRequest.Marshal(b, m, deterministic)
}
func (m *GetStatementsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatementsRequest.Merge(m, src)
}
func (m *GetStatementsRequest) XXX_Size() int {
	return xxx_messageInfo_GetStatementsRequest.Size(m)
}
func (m *GetStatementsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatementsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatementsRequest proto.InternalMessageInfo

func (m *GetStatementsRequest) GetBankCode() types.BankCode {
	if m != nil {
		return m.BankCode
	}
	return types.BankCode_UnknownBankCode
}

func (m *GetStatementsRequest) GetPeriodDays() int32 {
	if m != nil {
		return m.PeriodDays
	}
	return 0
}

func (m *GetStatementsRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UnknownStatus
}

// GetStatementResponse is the response for get statement.
type GetStatementsResponse struct {
	// Result is a list containing the statements.
	Result []*Statement `protobuf:"bytes,1,rep,name=Result,json=result,proto3" json:"Result,omitempty"`
	// HasMore indicates if there are more statements available.
	HasMore              bool     `protobuf:"varint,2,opt,name=HasMore,json=has_more,proto3" json:"HasMore,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatementsResponse) Reset()         { *m = GetStatementsResponse{} }
func (m *GetStatementsResponse) String() string { return proto.CompactTextString(m) }
func (*GetStatementsResponse) ProtoMessage()    {}
func (*GetStatementsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1cebb344c4e7431, []int{3}
}

func (m *GetStatementsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStatementsResponse.Unmarshal(m, b)
}
func (m *GetStatementsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStatementsResponse.Marshal(b, m, deterministic)
}
func (m *GetStatementsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatementsResponse.Merge(m, src)
}
func (m *GetStatementsResponse) XXX_Size() int {
	return xxx_messageInfo_GetStatementsResponse.Size(m)
}
func (m *GetStatementsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatementsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatementsResponse proto.InternalMessageInfo

func (m *GetStatementsResponse) GetResult() []*Statement {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetStatementsResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func init() {
	proto.RegisterEnum("statements.Status", Status_name, Status_value)
	proto.RegisterType((*Statement)(nil), "statements.Statement")
	proto.RegisterType((*GetStatementRequest)(nil), "statements.GetStatementRequest")
	proto.RegisterType((*GetStatementsRequest)(nil), "statements.GetStatementsRequest")
	proto.RegisterType((*GetStatementsResponse)(nil), "statements.GetStatementsResponse")
}

func init() {
	proto.RegisterFile("github.com/openbank/openbank/v1/statements/all.proto", fileDescriptor_e1cebb344c4e7431)
}

var fileDescriptor_e1cebb344c4e7431 = []byte{
	// 1085 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x5d, 0x6f, 0x1b, 0x45,
	0x14, 0xdd, 0x5d, 0xc7, 0x8e, 0x33, 0x21, 0xa9, 0x35, 0x69, 0x24, 0xcb, 0xaa, 0xca, 0x10, 0x09,
	0xd5, 0x0a, 0xe9, 0xfa, 0x23, 0x01, 0xd1, 0x48, 0x08, 0x39, 0x31, 0x4d, 0x53, 0x51, 0xd5, 0xda,
	0x52, 0x84, 0xfa, 0x12, 0xc6, 0x3b, 0xd7, 0xf6, 0x92, 0xf5, 0xcc, 0x32, 0x33, 0x6b, 0xd7, 0x20,
	0x24, 0x40, 0x48, 0xe4, 0xb1, 0x2a, 0xcf, 0xfc, 0x0d, 0xc4, 0x0b, 0xff, 0xa1, 0x12, 0x3c, 0xf0,
	0x80, 0x84, 0x84, 0x90, 0x90, 0xf8, 0x05, 0x3c, 0xa2, 0x9d, 0xf5, 0x67, 0x92, 0xb6, 0xea, 0x53,
	0x36, 0xf7, 0xde, 0x73, 0xe6, 0xdc, 0x73, 0xef, 0xce, 0x1a, 0xed, 0x75, 0x03, 0xdd, 0x8b, 0xdb,
	0xae, 0x2f, 0xfa, 0x15, 0x11, 0x01, 0x6f, 0x53, 0x7e, 0x3a, 0x7b, 0x18, 0xd4, 0x2a, 0x4a, 0x53,
	0x0d, 0x7d, 0xe0, 0x5a, 0x55, 0x68, 0x18, 0xba, 0x91, 0x14, 0x5a, 0x60, 0x34, 0x8b, 0x96, 0xae,
	0x75, 0x85, 0xe8, 0x86, 0x50, 0xa1, 0x51, 0x50, 0xa1, 0x9c, 0x0b, 0x4d, 0x75, 0x20, 0xb8, 0x4a,
	0x2b, 0x4b, 0x3b, 0xe6, 0x8f, 0x7f, 0xb3, 0x0b, 0xfc, 0xa6, 0x1a, 0xd2, 0x6e, 0x17, 0x64, 0x45,
	0x44, 0xa6, 0xe2, 0x92, 0xea, 0xca, 0xcb, 0xd4, 0xe8, 0x51, 0x04, 0x73, 0x42, 0xb6, 0x7e, 0x74,
	0xd0, 0xca, 0x83, 0x89, 0x16, 0x5c, 0x42, 0xce, 0x71, 0xb3, 0x68, 0x13, 0xbb, 0xbc, 0x72, 0x80,
	0xf2, 0x56, 0xd1, 0x2a, 0x5b, 0x55, 0xab, 0x65, 0x79, 0x4e, 0xc0, 0xf0, 0x3b, 0x28, 0x97, 0x14,
	0xc6, 0xaa, 0xe8, 0x10, 0xbb, 0xbc, 0x5e, 0xc7, 0xee, 0xac, 0x07, 0x37, 0xcd, 0x2c, 0x60, 0x72,
	0xca, 0xc4, 0xf0, 0x75, 0xb4, 0xd4, 0xa4, 0x1a, 0x8a, 0x99, 0x0b, 0xac, 0x4b, 0x8c, 0x6a, 0xc0,
	0x3b, 0x68, 0xb5, 0x09, 0xca, 0x97, 0x81, 0x69, 0xaa, 0xb8, 0x74, 0xa1, 0x6c, 0x95, 0xcd, 0xd2,
	0xb8, 0x86, 0x72, 0x8d, 0xbe, 0x88, 0xb9, 0x2e, 0x66, 0x89, 0x5d, 0x5e, 0xad, 0xaf, 0xb9, 0xa6,
	0x23, 0x37, 0x0d, 0x2e, 0x0a, 0xa0, 0x26, 0x86, 0x77, 0xd1, 0xf2, 0x01, 0x0d, 0x29, 0xf7, 0xa1,
	0x98, 0x7b, 0x19, 0x66, 0xb9, 0x9d, 0x56, 0xee, 0xe7, 0xf2, 0x56, 0xc1, 0x2a, 0x5a, 0x5b, 0xb7,
	0xd0, 0xc6, 0x11, 0xe8, 0xa9, 0x43, 0x1e, 0x7c, 0x1e, 0x83, 0x7a, 0xa1, 0x51, 0x53, 0xe8, 0x2f,
	0x36, 0xba, 0x3a, 0x8f, 0x55, 0x13, 0xf0, 0xbb, 0x28, 0x7f, 0x40, 0xf9, 0xe9, 0xa1, 0x60, 0x60,
	0x28, 0xd6, 0xeb, 0x57, 0xc6, 0x8a, 0x26, 0xe1, 0x05, 0xce, 0x95, 0x64, 0x76, 0x27, 0xbe, 0x60,
	0x80, 0xdf, 0x42, 0xa8, 0x05, 0x32, 0x10, 0xac, 0x49, 0x47, 0xe9, 0x1c, 0xb2, 0x8b, 0x56, 0x45,
	0x26, 0x7b, 0xc2, 0xe8, 0x48, 0xcd, 0x0d, 0x2c, 0xf3, 0x2a, 0x03, 0x9b, 0xea, 0xff, 0xc6, 0x46,
	0x9b, 0xe7, 0xf4, 0xab, 0x48, 0x70, 0x05, 0xf8, 0x16, 0xca, 0x79, 0xa0, 0xe2, 0x50, 0x17, 0x6d,
	0x92, 0x29, 0xaf, 0xd6, 0x37, 0xcf, 0x33, 0x9b, 0xc7, 0x45, 0x72, 0x69, 0x00, 0xf8, 0x4d, 0xb4,
	0x7c, 0x87, 0xaa, 0x7b, 0x42, 0x82, 0x91, 0x9f, 0x5f, 0x28, 0xca, 0xf7, 0xa8, 0x3a, 0xe9, 0x0b,
	0x39, 0xb5, 0x7f, 0xfb, 0xf6, 0xa4, 0x07, 0xbc, 0x89, 0xd6, 0x1e, 0xf2, 0x53, 0x2e, 0x86, 0x3c,
	0x0d, 0x14, 0xac, 0x92, 0x93, 0xb7, 0x70, 0x01, 0xe5, 0x3d, 0xf0, 0x21, 0x18, 0x00, 0x2b, 0xd8,
	0x26, 0x72, 0x05, 0x2d, 0xb7, 0x80, 0xb3, 0x80, 0x77, 0x0b, 0x4e, 0x12, 0x28, 0x39, 0x45, 0xab,
	0xfe, 0x2c, 0x83, 0x0a, 0x53, 0x61, 0x0f, 0x40, 0x0e, 0x02, 0x1f, 0xf0, 0x6f, 0x0e, 0x7a, 0x6d,
	0xbe, 0x41, 0xfc, 0xfa, 0x7c, 0x1f, 0x97, 0x8c, 0xbd, 0x74, 0x79, 0xa3, 0x5b, 0xdf, 0x3b, 0x4f,
	0x1b, 0x7f, 0xd9, 0xf3, 0x2f, 0xd2, 0x55, 0x0f, 0xb4, 0x0c, 0x60, 0x00, 0x84, 0x92, 0x29, 0xa4,
	0x74, 0x7f, 0x12, 0x55, 0x84, 0x86, 0x21, 0x61, 0x54, 0x53, 0xd2, 0x91, 0xa2, 0x3f, 0x5f, 0xb4,
	0x43, 0x14, 0x84, 0xe0, 0x6b, 0x60, 0xa4, 0x3d, 0x22, 0xba, 0x07, 0xb3, 0xd4, 0x49, 0xc0, 0xc8,
	0x48, 0xc4, 0x44, 0xc5, 0x51, 0x14, 0x06, 0xc0, 0xdc, 0xbb, 0x37, 0x50, 0xa6, 0x5e, 0xad, 0x62,
	0x82, 0xae, 0x8f, 0x15, 0x12, 0x78, 0x0c, 0x7e, 0x9c, 0x80, 0x55, 0xec, 0xfb, 0xa0, 0x54, 0x27,
	0x0e, 0xc3, 0x91, 0x7b, 0xb7, 0x86, 0x32, 0x7b, 0xd5, 0x3d, 0xbc, 0x8d, 0xca, 0x1e, 0xe8, 0x58,
	0x72, 0x60, 0x64, 0xd8, 0x03, 0x6e, 0xf8, 0x25, 0x28, 0x11, 0x4b, 0x1f, 0x48, 0xa0, 0x08, 0x17,
	0x9a, 0x74, 0x44, 0xcc, 0x99, 0xdb, 0xc6, 0xa8, 0x80, 0x72, 0xf7, 0x1b, 0xb1, 0xee, 0xd5, 0x71,
	0x0e, 0x2d, 0x49, 0xa0, 0xec, 0xdb, 0x5f, 0xff, 0xfe, 0xc1, 0xd9, 0xc4, 0x1b, 0xe7, 0xae, 0xb5,
	0x2f, 0x8f, 0x9b, 0x5f, 0x9d, 0x39, 0xd6, 0x13, 0xc7, 0xcc, 0x11, 0x7f, 0x8a, 0xd6, 0x16, 0xd6,
	0x06, 0x93, 0xe7, 0xd9, 0x3a, 0x79, 0x23, 0x4a, 0x6f, 0xbc, 0xa0, 0x22, 0xdd, 0xb9, 0xad, 0xdc,
	0xec, 0x84, 0x52, 0xe6, 0xcc, 0xb1, 0x0e, 0xfe, 0xcc, 0x3e, 0x6d, 0xfc, 0x94, 0x45, 0x99, 0xba,
	0x5b, 0xc5, 0xf7, 0xd0, 0xfa, 0x0c, 0x42, 0x1a, 0xad, 0x63, 0xbc, 0xd7, 0x92, 0x62, 0x10, 0x30,
	0x50, 0xe4, 0xd0, 0x7b, 0xd8, 0x24, 0x22, 0x02, 0x99, 0x5e, 0x94, 0x44, 0xf0, 0x45, 0x57, 0xd5,
	0xd4, 0x00, 0xb7, 0x9e, 0xad, 0xb9, 0x55, 0xb7, 0xba, 0x95, 0xa9, 0x0c, 0x6a, 0xdb, 0xb6, 0x53,
	0x2f, 0xd0, 0xc4, 0x68, 0xdf, 0x00, 0x2b, 0x9f, 0x29, 0xc1, 0xf7, 0x2f, 0x44, 0xbc, 0x0f, 0x13,
	0x67, 0x6b, 0xf8, 0x03, 0x74, 0x78, 0x99, 0xb3, 0xe9, 0x50, 0x98, 0x80, 0xd4, 0x5a, 0x5f, 0x70,
	0x4d, 0x03, 0xae, 0x4c, 0x36, 0x56, 0x20, 0x6f, 0x28, 0xe2, 0x4b, 0x60, 0xc0, 0x75, 0x40, 0x43,
	0xe5, 0x7a, 0xad, 0x84, 0x6d, 0x17, 0x1f, 0xa3, 0xa3, 0x8b, 0x6c, 0x49, 0xfd, 0x8c, 0xaa, 0x47,
	0x07, 0x40, 0x22, 0x90, 0xfd, 0x40, 0xa9, 0x20, 0xe9, 0x49, 0x10, 0x6a, 0x26, 0xbe, 0x30, 0x53,
	0xd7, 0xbb, 0x8d, 0x32, 0x6f, 0x57, 0xab, 0xf8, 0x7d, 0xf4, 0xde, 0x22, 0x23, 0xe5, 0x24, 0xe6,
	0xf0, 0x38, 0x4a, 0x57, 0x0d, 0xa4, 0x14, 0x92, 0x08, 0xdf, 0x8f, 0x25, 0xb0, 0xa9, 0x45, 0x20,
	0x07, 0x20, 0x89, 0x0a, 0x18, 0xb8, 0xde, 0x49, 0xa2, 0xac, 0x8a, 0x3f, 0x41, 0x1f, 0x3f, 0xbf,
	0xcf, 0xb6, 0x60, 0xa3, 0x64, 0x8b, 0xfa, 0x34, 0xec, 0x08, 0xd9, 0xa7, 0x3a, 0xa1, 0x16, 0x73,
	0xa2, 0xfb, 0x54, 0xfb, 0x3d, 0x03, 0x99, 0x9e, 0x3c, 0xc6, 0xba, 0x8f, 0xfe, 0xb5, 0xd1, 0x3f,
	0xf6, 0x74, 0xe3, 0xfe, 0xb0, 0xf3, 0x19, 0xfc, 0x9d, 0xdd, 0x18, 0xb7, 0x24, 0x2e, 0x9b, 0x97,
	0x4a, 0xce, 0x92, 0xa0, 0xb4, 0x0c, 0x0c, 0x55, 0x62, 0x41, 0xac, 0x7b, 0x89, 0x99, 0x3e, 0x4d,
	0x02, 0x89, 0x63, 0xca, 0x25, 0x1f, 0xf5, 0x60, 0x3e, 0x91, 0xb8, 0x15, 0x49, 0x61, 0x88, 0x3b,
	0x22, 0x0c, 0xc5, 0x30, 0xf5, 0x2c, 0x39, 0x58, 0xc8, 0xe0, 0x8b, 0xb4, 0x22, 0xb9, 0x86, 0x49,
	0x27, 0x14, 0x43, 0xb7, 0xbc, 0x54, 0xcf, 0x27, 0x1b, 0x9f, 0x50, 0xec, 0xaf, 0x98, 0x8f, 0xa8,
	0x38, 0x05, 0x7e, 0xb0, 0x8f, 0x4a, 0xe9, 0x6b, 0x81, 0xf1, 0x91, 0xa4, 0xa9, 0x30, 0xca, 0xc6,
	0x53, 0x40, 0xd7, 0x50, 0x76, 0x28, 0x03, 0x0d, 0x78, 0x63, 0x9c, 0x34, 0xff, 0x8d, 0xb3, 0x77,
	0xec, 0x96, 0xf5, 0x68, 0xee, 0x37, 0xc0, 0xd7, 0xb6, 0x75, 0x66, 0x5b, 0x4f, 0x6c, 0xeb, 0x67,
	0xdb, 0xfa, 0xdd, 0xb6, 0xfe, 0xb3, 0xad, 0x67, 0x8e, 0xd5, 0xce, 0x99, 0x4f, 0xf4, 0xee, 0xff,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xec, 0xc0, 0x44, 0xa7, 0x63, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatementServiceClient is the client API for StatementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatementServiceClient interface {
	// GetStatement retrieve the detail of a statement, selected by its id.
	GetStatement(ctx context.Context, in *GetStatementRequest, opts ...grpc.CallOption) (*Statement, error)
	GetStatements(ctx context.Context, in *GetStatementsRequest, opts ...grpc.CallOption) (*GetStatementsResponse, error)
}

type statementServiceClient struct {
	cc *grpc.ClientConn
}

func NewStatementServiceClient(cc *grpc.ClientConn) StatementServiceClient {
	return &statementServiceClient{cc}
}

func (c *statementServiceClient) GetStatement(ctx context.Context, in *GetStatementRequest, opts ...grpc.CallOption) (*Statement, error) {
	out := new(Statement)
	err := c.cc.Invoke(ctx, "/statements.StatementService/GetStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statementServiceClient) GetStatements(ctx context.Context, in *GetStatementsRequest, opts ...grpc.CallOption) (*GetStatementsResponse, error) {
	out := new(GetStatementsResponse)
	err := c.cc.Invoke(ctx, "/statements.StatementService/GetStatements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatementServiceServer is the server API for StatementService service.
type StatementServiceServer interface {
	// GetStatement retrieve the detail of a statement, selected by its id.
	GetStatement(context.Context, *GetStatementRequest) (*Statement, error)
	GetStatements(context.Context, *GetStatementsRequest) (*GetStatementsResponse, error)
}

func RegisterStatementServiceServer(s *grpc.Server, srv StatementServiceServer) {
	s.RegisterService(&_StatementService_serviceDesc, srv)
}

func _StatementService_GetStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatementServiceServer).GetStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statements.StatementService/GetStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatementServiceServer).GetStatement(ctx, req.(*GetStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatementService_GetStatements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatementServiceServer).GetStatements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statements.StatementService/GetStatements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatementServiceServer).GetStatements(ctx, req.(*GetStatementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statements.StatementService",
	HandlerType: (*StatementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatement",
			Handler:    _StatementService_GetStatement_Handler,
		},
		{
			MethodName: "GetStatements",
			Handler:    _StatementService_GetStatements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/openbank/openbank/v1/statements/all.proto",
}
