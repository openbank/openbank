// +gunk openapiv2.Swagger{
//         Swagger: "2.0",
//         Info: openapiv2.Info{
//                 Title:       "Statements API",
//                 Description: "Provides CRUD operations on the statement resource.",
//                 Version:     "1.0.0",
//         },
//         Schemes: []openapiv2.SwaggerScheme{
//                 openapiv2.HTTPS,
//         },
//         Consumes: []string{
//                 "application/json",
//         },
//         Produces: []string{
//                 "application/json",
//         },
//         Responses: map[string]openapiv2.Response{
//                 "400": openapiv2.Response{
//                         Description: "Returned when the request body is malformatted or does not match the expected request.",
//                 },
//                 "401": openapiv2.Response{
//                         Description: "Returned when the request does not contains the user's credentials.",
//                 },
//                 "403": openapiv2.Response{
//                         Description: "Returned when the user does not have permission to access the resource.",
//                 },
//                 "404": openapiv2.Response{
//                         Description: "Returned when the resource is not found.",
//                 },
//                 "500": openapiv2.Response{
//                         Description: "Returned when an unexpected error occured on the server side.",
//                 },
//         },
//         SecurityDefinitions: openapiv2.SecurityDefinitions{
//                 Security: map[string]openapiv2.SecurityScheme{
//                         "OAuth2": openapiv2.SecurityScheme{
//                                 Type:             openapiv2.TYPE_OAUTH2,
//                                 Flow:             openapiv2.FLOW_ACCESS_CODE,
//                                 Description:      "Access to statement resources is restricted to authenticated users. The authentication process follows the Authorization Code flow.",
//                                 AuthorizationURL: "/v1/auth",
//                                 TokenURL:         "/v1/token",
//                                 Scopes: openapiv2.Scopes{
//                                         Scope: map[string]string{
//                                                 "https://auth.bnk.to/statement.read":  "View statement data",
//                                                 "https://auth.bnk.to/statement.write": "Manage statement data",
//                                         },
//                                 },
//                         },
//                 },
//         },
// }
package statement

import (
	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"

	types "github.com/openbank/openbank/v1/types"
)

// Status define the status of a statment.
type Status int

const (
	UnknownStatus Status = iota
	// Received is the value for a received statment.
	Received
	// Pending is the value for a pending statement.
	Pending
)

// Statement holds details regarding a customer's statement.
type Statement struct {
	// ID is the unique identifier of a statement.
	ID string `pb:"1" json:"id"`
	// Status is the status of the statement.
	Status Status `pb:"2" json:"status"`
	// Date is the date of the statement.
	Date string `pb:"3" json:"date"`
	// Description is the description of the statement.
	Description string `pb:"4" json:"description"`
	// Amount is the amount if the transcation that writes on the statement.
	Amount types.Amount `pb:"5" json:"amount"`
	// Balance is remaining balance after related transaction.
	Balance types.Amount `pb:"6" json:"balance"`
}

// GetStatementRequest is the request envelope to retrieve a statement.
type GetStatementRequest struct {
	// ID is the unique identifier of the statement
	ID string `pb:"1" json:"id"`
}

// GetStatementsRequest is the request envelope to retrieve several statement.
type GetStatementsRequest struct {
	// BankCode is a bank code to get related statement.
	BankCode string `pb:"1" json:"bank_code"`
	// PeriodDays is statement period to be query.
	PeriodDays int `pb:"2" json:"period_days"`
	// Status is status of the statement to be query.
	Status Status `pb:"3" json:"status"`
}

// GetStatementResponse is the response envelope for retrieving
type GetStatementsResponse struct {
	// Result is a list containing the statement.
	Result []Statement `pb:"1" json:"result"`
	// HasMore indicates if there are more statement available.
	HasMore bool `pb:"2" json:"has_more"`
}

// StatementService provides statement-related operations.
type StatementService interface {
	// GetStatement retrieves a specific statement, specified by its ID.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/statement/{ID}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Statement"},
	//         Description: "GetStatement retrieves a specific statement, specified by its ID.",
	//         Summary:     "Retrieve a statement",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/statementStatement",
	//                                 },
	//                         },
	//                 },
	//                 "404": openapiv2.Response{
	//                         Description: "Returned when the resource is not found.",
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/statement.read",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	GetStatement(GetStatementRequest) Statement

	// GetStatements return a list containing up to 20 statement.

	// +gunk http.Match{
	//	Method: "GET",
	//	Path: "/v1/statement",
	// }

	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Statement"},
	//         Description: "Returns a list containing up to 20 statement. `next_starting_index` can be specified for pagination.",
	//         Summary:     "Retrieve multiple statement",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/statementGetStatementsResponse",
	//                                 },
	//                         },
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "https://auth.bnk.to/statement.read",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	GetStatements(GetStatementsRequest) GetStatementsResponse
}
