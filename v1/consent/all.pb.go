// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/openbank/openbank/v1/consent/all.proto

package consent

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_UnknownStatus   Status = 0
	Status_INITIATED       Status = 1
	Status_ACCEPTED        Status = 2
	Status_REJECTED        Status = 3
	Status_REVOKED         Status = 4
	Status_RECEIVED        Status = 5
	Status_VALID           Status = 6
	Status_REVOKEDBYPSU    Status = 7
	Status_EXPIRED         Status = 8
	Status_TERMINATEDBYTPP Status = 9
)

var Status_name = map[int32]string{
	0: "UnknownStatus",
	1: "INITIATED",
	2: "ACCEPTED",
	3: "REJECTED",
	4: "REVOKED",
	5: "RECEIVED",
	6: "VALID",
	7: "REVOKEDBYPSU",
	8: "EXPIRED",
	9: "TERMINATEDBYTPP",
}

var Status_value = map[string]int32{
	"UnknownStatus":   0,
	"INITIATED":       1,
	"ACCEPTED":        2,
	"REJECTED":        3,
	"REVOKED":         4,
	"RECEIVED":        5,
	"VALID":           6,
	"REVOKEDBYPSU":    7,
	"EXPIRED":         8,
	"TERMINATEDBYTPP": 9,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_955aa7c027ca6560, []int{0}
}

// AnswerConsentChallengeRequest is a request mesasge to answer consent challenge request
type AnswerConsentChallengeRequest struct {
	BankID               string   `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"BankID,omitempty"`
	ConsentID            string   `protobuf:"bytes,2,opt,name=ConsentID,json=consent_id,proto3" json:"ConsentID,omitempty"`
	Answer               string   `protobuf:"bytes,3,opt,name=Answer,json=answer,proto3" json:"Answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnswerConsentChallengeRequest) Reset()         { *m = AnswerConsentChallengeRequest{} }
func (m *AnswerConsentChallengeRequest) String() string { return proto.CompactTextString(m) }
func (*AnswerConsentChallengeRequest) ProtoMessage()    {}
func (*AnswerConsentChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_955aa7c027ca6560, []int{0}
}

func (m *AnswerConsentChallengeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnswerConsentChallengeRequest.Unmarshal(m, b)
}
func (m *AnswerConsentChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnswerConsentChallengeRequest.Marshal(b, m, deterministic)
}
func (m *AnswerConsentChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnswerConsentChallengeRequest.Merge(m, src)
}
func (m *AnswerConsentChallengeRequest) XXX_Size() int {
	return xxx_messageInfo_AnswerConsentChallengeRequest.Size(m)
}
func (m *AnswerConsentChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnswerConsentChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AnswerConsentChallengeRequest proto.InternalMessageInfo

func (m *AnswerConsentChallengeRequest) GetBankID() string {
	if m != nil {
		return m.BankID
	}
	return ""
}

func (m *AnswerConsentChallengeRequest) GetConsentID() string {
	if m != nil {
		return m.ConsentID
	}
	return ""
}

func (m *AnswerConsentChallengeRequest) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

// Consent is a response mesasge
type Consent struct {
	ConsentID            string   `protobuf:"bytes,1,opt,name=ConsentID,json=consent_id,proto3" json:"ConsentID,omitempty"`
	Jwt                  string   `protobuf:"bytes,2,opt,name=Jwt,json=jwt,proto3" json:"Jwt,omitempty"`
	Status               Status   `protobuf:"varint,3,opt,name=Status,json=status,proto3,enum=consent.Status" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Consent) Reset()         { *m = Consent{} }
func (m *Consent) String() string { return proto.CompactTextString(m) }
func (*Consent) ProtoMessage()    {}
func (*Consent) Descriptor() ([]byte, []int) {
	return fileDescriptor_955aa7c027ca6560, []int{1}
}

func (m *Consent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Consent.Unmarshal(m, b)
}
func (m *Consent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Consent.Marshal(b, m, deterministic)
}
func (m *Consent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consent.Merge(m, src)
}
func (m *Consent) XXX_Size() int {
	return xxx_messageInfo_Consent.Size(m)
}
func (m *Consent) XXX_DiscardUnknown() {
	xxx_messageInfo_Consent.DiscardUnknown(m)
}

var xxx_messageInfo_Consent proto.InternalMessageInfo

func (m *Consent) GetConsentID() string {
	if m != nil {
		return m.ConsentID
	}
	return ""
}

func (m *Consent) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

func (m *Consent) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UnknownStatus
}

// CreateConsentEmailRequest
type CreateConsentEmailRequest struct {
	BankID               string   `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"BankID,omitempty"`
	For                  string   `protobuf:"bytes,2,opt,name=For,json=for,proto3" json:"For,omitempty"`
	View                 string   `protobuf:"bytes,3,opt,name=View,json=view,proto3" json:"View,omitempty"`
	Email                string   `protobuf:"bytes,4,opt,name=Email,json=email,proto3" json:"Email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateConsentEmailRequest) Reset()         { *m = CreateConsentEmailRequest{} }
func (m *CreateConsentEmailRequest) String() string { return proto.CompactTextString(m) }
func (*CreateConsentEmailRequest) ProtoMessage()    {}
func (*CreateConsentEmailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_955aa7c027ca6560, []int{2}
}

func (m *CreateConsentEmailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateConsentEmailRequest.Unmarshal(m, b)
}
func (m *CreateConsentEmailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateConsentEmailRequest.Marshal(b, m, deterministic)
}
func (m *CreateConsentEmailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateConsentEmailRequest.Merge(m, src)
}
func (m *CreateConsentEmailRequest) XXX_Size() int {
	return xxx_messageInfo_CreateConsentEmailRequest.Size(m)
}
func (m *CreateConsentEmailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateConsentEmailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateConsentEmailRequest proto.InternalMessageInfo

func (m *CreateConsentEmailRequest) GetBankID() string {
	if m != nil {
		return m.BankID
	}
	return ""
}

func (m *CreateConsentEmailRequest) GetFor() string {
	if m != nil {
		return m.For
	}
	return ""
}

func (m *CreateConsentEmailRequest) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

func (m *CreateConsentEmailRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// CreateConsentSMSRequest
type CreateConsentSMSRequest struct {
	BankID               string   `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"BankID,omitempty"`
	For                  string   `protobuf:"bytes,2,opt,name=For,json=for,proto3" json:"For,omitempty"`
	View                 string   `protobuf:"bytes,3,opt,name=View,json=view,proto3" json:"View,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,4,opt,name=PhoneNumber,json=phone_number,proto3" json:"PhoneNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateConsentSMSRequest) Reset()         { *m = CreateConsentSMSRequest{} }
func (m *CreateConsentSMSRequest) String() string { return proto.CompactTextString(m) }
func (*CreateConsentSMSRequest) ProtoMessage()    {}
func (*CreateConsentSMSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_955aa7c027ca6560, []int{3}
}

func (m *CreateConsentSMSRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateConsentSMSRequest.Unmarshal(m, b)
}
func (m *CreateConsentSMSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateConsentSMSRequest.Marshal(b, m, deterministic)
}
func (m *CreateConsentSMSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateConsentSMSRequest.Merge(m, src)
}
func (m *CreateConsentSMSRequest) XXX_Size() int {
	return xxx_messageInfo_CreateConsentSMSRequest.Size(m)
}
func (m *CreateConsentSMSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateConsentSMSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateConsentSMSRequest proto.InternalMessageInfo

func (m *CreateConsentSMSRequest) GetBankID() string {
	if m != nil {
		return m.BankID
	}
	return ""
}

func (m *CreateConsentSMSRequest) GetFor() string {
	if m != nil {
		return m.For
	}
	return ""
}

func (m *CreateConsentSMSRequest) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

func (m *CreateConsentSMSRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

// GetConsentsRequest
type GetConsentsRequest struct {
	BankID               string   `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"BankID,omitempty"`
	NexeStartingIndex    string   `protobuf:"bytes,2,opt,name=NexeStartingIndex,json=next_starting_index,proto3" json:"NexeStartingIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConsentsRequest) Reset()         { *m = GetConsentsRequest{} }
func (m *GetConsentsRequest) String() string { return proto.CompactTextString(m) }
func (*GetConsentsRequest) ProtoMessage()    {}
func (*GetConsentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_955aa7c027ca6560, []int{4}
}

func (m *GetConsentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConsentsRequest.Unmarshal(m, b)
}
func (m *GetConsentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConsentsRequest.Marshal(b, m, deterministic)
}
func (m *GetConsentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConsentsRequest.Merge(m, src)
}
func (m *GetConsentsRequest) XXX_Size() int {
	return xxx_messageInfo_GetConsentsRequest.Size(m)
}
func (m *GetConsentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConsentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetConsentsRequest proto.InternalMessageInfo

func (m *GetConsentsRequest) GetBankID() string {
	if m != nil {
		return m.BankID
	}
	return ""
}

func (m *GetConsentsRequest) GetNexeStartingIndex() string {
	if m != nil {
		return m.NexeStartingIndex
	}
	return ""
}

// GetConsentsResponse
type GetConsentsResponse struct {
	Consents             []*Consent `protobuf:"bytes,1,rep,name=Consents,json=consents,proto3" json:"Consents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetConsentsResponse) Reset()         { *m = GetConsentsResponse{} }
func (m *GetConsentsResponse) String() string { return proto.CompactTextString(m) }
func (*GetConsentsResponse) ProtoMessage()    {}
func (*GetConsentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_955aa7c027ca6560, []int{5}
}

func (m *GetConsentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConsentsResponse.Unmarshal(m, b)
}
func (m *GetConsentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConsentsResponse.Marshal(b, m, deterministic)
}
func (m *GetConsentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConsentsResponse.Merge(m, src)
}
func (m *GetConsentsResponse) XXX_Size() int {
	return xxx_messageInfo_GetConsentsResponse.Size(m)
}
func (m *GetConsentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConsentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetConsentsResponse proto.InternalMessageInfo

func (m *GetConsentsResponse) GetConsents() []*Consent {
	if m != nil {
		return m.Consents
	}
	return nil
}

// RevokeConsentRequest
type RevokeConsentRequest struct {
	BankID               string   `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"BankID,omitempty"`
	ConsentID            string   `protobuf:"bytes,2,opt,name=ConsentID,json=consent_id,proto3" json:"ConsentID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevokeConsentRequest) Reset()         { *m = RevokeConsentRequest{} }
func (m *RevokeConsentRequest) String() string { return proto.CompactTextString(m) }
func (*RevokeConsentRequest) ProtoMessage()    {}
func (*RevokeConsentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_955aa7c027ca6560, []int{6}
}

func (m *RevokeConsentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevokeConsentRequest.Unmarshal(m, b)
}
func (m *RevokeConsentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevokeConsentRequest.Marshal(b, m, deterministic)
}
func (m *RevokeConsentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokeConsentRequest.Merge(m, src)
}
func (m *RevokeConsentRequest) XXX_Size() int {
	return xxx_messageInfo_RevokeConsentRequest.Size(m)
}
func (m *RevokeConsentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokeConsentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevokeConsentRequest proto.InternalMessageInfo

func (m *RevokeConsentRequest) GetBankID() string {
	if m != nil {
		return m.BankID
	}
	return ""
}

func (m *RevokeConsentRequest) GetConsentID() string {
	if m != nil {
		return m.ConsentID
	}
	return ""
}

func init() {
	proto.RegisterEnum("consent.Status", Status_name, Status_value)
	proto.RegisterType((*AnswerConsentChallengeRequest)(nil), "consent.AnswerConsentChallengeRequest")
	proto.RegisterType((*Consent)(nil), "consent.Consent")
	proto.RegisterType((*CreateConsentEmailRequest)(nil), "consent.CreateConsentEmailRequest")
	proto.RegisterType((*CreateConsentSMSRequest)(nil), "consent.CreateConsentSMSRequest")
	proto.RegisterType((*GetConsentsRequest)(nil), "consent.GetConsentsRequest")
	proto.RegisterType((*GetConsentsResponse)(nil), "consent.GetConsentsResponse")
	proto.RegisterType((*RevokeConsentRequest)(nil), "consent.RevokeConsentRequest")
}

func init() {
	proto.RegisterFile("github.com/openbank/openbank/v1/consent/all.proto", fileDescriptor_955aa7c027ca6560)
}

var fileDescriptor_955aa7c027ca6560 = []byte{
	// 1549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4f, 0x6c, 0x1b, 0x4d,
	0x15, 0xdf, 0x5d, 0x27, 0x8e, 0x33, 0xf9, 0xf2, 0xd5, 0x99, 0x7c, 0x1f, 0x9f, 0xeb, 0x26, 0x65,
	0xea, 0x54, 0x25, 0x44, 0xcd, 0xda, 0x71, 0xda, 0xaa, 0x8a, 0x84, 0x90, 0x63, 0xbb, 0xad, 0x43,
	0x92, 0x1a, 0xe7, 0x0f, 0x6d, 0x0f, 0xa4, 0xe3, 0xdd, 0xb1, 0xbd, 0xcd, 0x7a, 0x66, 0xbb, 0x33,
	0x1b, 0xa7, 0x54, 0x95, 0xf8, 0x73, 0xe9, 0x8d, 0x2a, 0x1c, 0x38, 0x54, 0x82, 0x2b, 0x17, 0x24,
	0x24, 0x0e, 0x20, 0x10, 0x12, 0x37, 0x2e, 0x1c, 0x90, 0xe0, 0x00, 0x77, 0xce, 0x88, 0x13, 0xea,
	0x0d, 0x34, 0xbb, 0xeb, 0xb5, 0x8d, 0xb7, 0xa1, 0x3d, 0xb4, 0x9c, 0xbc, 0x7e, 0xef, 0xf7, 0xde,
	0xfb, 0xed, 0xef, 0xbd, 0x7d, 0xb3, 0x0b, 0xd6, 0xda, 0x96, 0xe8, 0x78, 0x4d, 0xdd, 0x60, 0xdd,
	0x3c, 0x73, 0x08, 0x6d, 0x62, 0x7a, 0x3c, 0xb8, 0x38, 0x59, 0xcb, 0x1b, 0x8c, 0x72, 0x42, 0x45,
	0x1e, 0xdb, 0xb6, 0xee, 0xb8, 0x4c, 0x30, 0x38, 0x15, 0x9a, 0xb2, 0x0b, 0x6d, 0xc6, 0xda, 0x36,
	0xc9, 0x63, 0xc7, 0xca, 0x63, 0x4a, 0x99, 0xc0, 0xc2, 0x62, 0x94, 0x07, 0xb0, 0xec, 0x75, 0xff,
	0xc7, 0x58, 0x6d, 0x13, 0xba, 0xca, 0x7b, 0xb8, 0xdd, 0x26, 0x6e, 0x9e, 0x39, 0x3e, 0x62, 0x1c,
	0x9d, 0x7b, 0xad, 0x82, 0xc5, 0x12, 0xe5, 0x3d, 0xe2, 0x96, 0x83, 0xec, 0xe5, 0x0e, 0xb6, 0x6d,
	0x42, 0xdb, 0xa4, 0x41, 0x9e, 0x7a, 0x84, 0x0b, 0xb8, 0x04, 0x92, 0x9b, 0x98, 0x1e, 0xd7, 0x2a,
	0x19, 0x15, 0xa9, 0xcb, 0xd3, 0x9b, 0x20, 0xa5, 0x64, 0x94, 0x65, 0xa5, 0xa0, 0xd4, 0x95, 0xc6,
	0x94, 0x64, 0x7b, 0x64, 0x99, 0xf0, 0xab, 0x60, 0x3a, 0x8c, 0xaf, 0x55, 0x32, 0xda, 0x18, 0x0e,
	0x84, 0xd4, 0x25, 0x34, 0x07, 0x92, 0x41, 0xc1, 0x4c, 0x62, 0x0c, 0x97, 0xc4, 0xbe, 0x67, 0x23,
	0x99, 0x52, 0xd2, 0x4a, 0x46, 0xc9, 0xfd, 0x50, 0x05, 0x53, 0x61, 0xde, 0xd1, 0x12, 0xea, 0xb9,
	0x25, 0x16, 0x40, 0x62, 0xab, 0x27, 0x62, 0x78, 0x24, 0x9e, 0xf4, 0x04, 0x5c, 0x07, 0xc9, 0x3d,
	0x81, 0x85, 0xc7, 0x7d, 0x02, 0x9f, 0x16, 0x2f, 0xe8, 0x61, 0xa8, 0x1e, 0x98, 0x47, 0x19, 0x71,
	0xdf, 0x16, 0x31, 0xfa, 0x99, 0x0a, 0x2e, 0x96, 0x5d, 0x82, 0x05, 0x09, 0xc9, 0x54, 0xbb, 0xd8,
	0xb2, 0xdf, 0x4b, 0xab, 0x05, 0x90, 0xb8, 0xc3, 0xdc, 0x38, 0x76, 0x2d, 0xe6, 0xc2, 0xcb, 0x60,
	0xe2, 0xd0, 0x22, 0xbd, 0x18, 0x71, 0x26, 0x4e, 0x2c, 0xd2, 0x83, 0x08, 0x4c, 0xfa, 0x25, 0x33,
	0x13, 0x63, 0x80, 0x49, 0x22, 0x1d, 0x11, 0xd5, 0x5f, 0xaa, 0xe0, 0x8b, 0x11, 0xaa, 0x7b, 0x3b,
	0x7b, 0x1f, 0x91, 0xe8, 0x2a, 0x98, 0xa9, 0x77, 0x18, 0x25, 0xbb, 0x5e, 0xb7, 0x49, 0xdc, 0x18,
	0xba, 0x9f, 0x38, 0xd2, 0x7d, 0x44, 0x7d, 0x7f, 0xc4, 0xfa, 0x05, 0x80, 0x77, 0x89, 0x08, 0x19,
	0xf3, 0xf7, 0xe2, 0xbb, 0x01, 0xe6, 0x76, 0xc9, 0x29, 0xd9, 0x13, 0xd8, 0x15, 0x16, 0x6d, 0xd7,
	0xa8, 0x49, 0x4e, 0x63, 0xd8, 0xcf, 0x53, 0x72, 0x2a, 0x8e, 0x78, 0x88, 0x3a, 0xb2, 0x24, 0x2c,
	0x2a, 0xff, 0x2d, 0x30, 0x3f, 0x52, 0x9e, 0x3b, 0xf2, 0x12, 0xde, 0x06, 0xa9, 0xbe, 0x2d, 0xa3,
	0xa2, 0xc4, 0xf2, 0x4c, 0x31, 0x1d, 0x4d, 0x4d, 0xe8, 0x18, 0xa9, 0x91, 0x0a, 0x9d, 0x83, 0xc1,
	0xa1, 0xe0, 0xb3, 0x06, 0x39, 0x61, 0xc7, 0xfd, 0x66, 0x7c, 0xa0, 0xc7, 0xab, 0x5f, 0x6f, 0xe5,
	0x8f, 0x6a, 0x7f, 0xcc, 0xe1, 0xe7, 0x60, 0xf6, 0x80, 0x1e, 0x53, 0xd6, 0xa3, 0x81, 0x21, 0xad,
	0x64, 0xb5, 0x94, 0x02, 0xe7, 0xc0, 0x74, 0x6d, 0xb7, 0xb6, 0x5f, 0x2b, 0xed, 0x57, 0x2b, 0x69,
	0xd5, 0x37, 0xa5, 0x41, 0xaa, 0x54, 0x2e, 0x57, 0xeb, 0xd2, 0xa2, 0xf5, 0x2d, 0x8d, 0xea, 0x56,
	0xb5, 0x2c, 0x2d, 0x09, 0xdf, 0x72, 0x01, 0x4c, 0x35, 0xaa, 0x87, 0xf7, 0xbf, 0x51, 0xad, 0xa4,
	0x27, 0x06, 0x90, 0x72, 0xb5, 0x76, 0x58, 0xad, 0xa4, 0x27, 0x7d, 0xcb, 0x2c, 0x98, 0x3c, 0x2c,
	0x6d, 0xd7, 0x2a, 0xe9, 0xa4, 0xff, 0xf7, 0x33, 0xf0, 0x49, 0x18, 0xb1, 0xf9, 0xb0, 0xbe, 0x77,
	0x90, 0x9e, 0xea, 0xe7, 0xa9, 0x3e, 0xa8, 0xd7, 0x1a, 0xd5, 0x4a, 0x3a, 0xe5, 0x1b, 0xbe, 0x00,
	0x17, 0xf6, 0xab, 0x8d, 0x9d, 0xda, 0xae, 0x24, 0xb4, 0xf9, 0x70, 0xbf, 0x5e, 0x4f, 0x4f, 0x4b,
	0x47, 0x56, 0xcb, 0x28, 0xc5, 0xbf, 0xcc, 0x82, 0x4f, 0xfb, 0x63, 0x4c, 0xdc, 0x13, 0xcb, 0x20,
	0xf0, 0x8d, 0x06, 0xbe, 0x14, 0xbf, 0xba, 0xe0, 0xb5, 0xa8, 0x39, 0xe7, 0xee, 0xb6, 0xec, 0x58,
	0x13, 0x73, 0x3f, 0xd5, 0xce, 0x4a, 0x7f, 0x1b, 0xda, 0x3a, 0x57, 0x83, 0x04, 0x48, 0x74, 0x08,
	0x0a, 0xb1, 0xc8, 0x25, 0x4f, 0x89, 0xc7, 0x05, 0x32, 0xfa, 0xe9, 0xb2, 0x6f, 0x41, 0xc9, 0x1a,
	0x03, 0xd4, 0xd6, 0x37, 0x41, 0xa2, 0x58, 0x58, 0x83, 0x5b, 0xe0, 0x5a, 0x00, 0x27, 0xe6, 0xf9,
	0x01, 0x10, 0x81, 0xcb, 0xd9, 0x85, 0xa5, 0xbc, 0x49, 0x5a, 0x16, 0xb5, 0x82, 0x0d, 0x1e, 0x82,
	0x43, 0x7a, 0xcd, 0x3c, 0x58, 0x05, 0xc9, 0xfb, 0x25, 0x4f, 0x74, 0x8a, 0x70, 0x09, 0x5c, 0xe9,
	0x08, 0xe1, 0xf0, 0x8d, 0x7c, 0x1e, 0x7b, 0xa2, 0xa3, 0x37, 0xe9, 0xb1, 0x2e, 0x58, 0x3f, 0x42,
	0xef, 0xb9, 0x96, 0x20, 0xdf, 0xff, 0xf3, 0xdf, 0x7f, 0xa4, 0xdd, 0xda, 0x50, 0x57, 0x72, 0x6b,
	0xf2, 0x90, 0x91, 0xf3, 0xc5, 0xf3, 0xcf, 0x83, 0x01, 0x7c, 0xd1, 0x87, 0xf2, 0xfc, 0xf3, 0x68,
	0xda, 0x5e, 0xe4, 0x23, 0x3a, 0x2f, 0x35, 0xe5, 0x95, 0xe6, 0x8f, 0x1c, 0xfc, 0x83, 0x06, 0xe0,
	0xf8, 0x16, 0x84, 0xb9, 0x81, 0x9c, 0x6f, 0x5b, 0x91, 0x31, 0x92, 0xff, 0x4b, 0x3d, 0x2b, 0xfd,
	0x7e, 0x48, 0xf2, 0x70, 0x69, 0x21, 0x4c, 0x91, 0xbf, 0xd0, 0xfa, 0x02, 0x65, 0x2f, 0x05, 0x0e,
	0x8e, 0x30, 0xa2, 0xa4, 0x37, 0xea, 0xdc, 0xda, 0x0d, 0xc4, 0xbd, 0x0b, 0x96, 0xaa, 0xc3, 0x76,
	0x64, 0xf8, 0x31, 0x26, 0xe2, 0x9e, 0x61, 0x10, 0xce, 0x5b, 0x9e, 0x6d, 0x3f, 0xd3, 0x3f, 0x94,
	0xb2, 0xd7, 0xa4, 0xb2, 0x57, 0xce, 0x53, 0xd6, 0x27, 0x3d, 0xa4, 0xe4, 0x6f, 0x35, 0x90, 0xfe,
	0xef, 0x25, 0x0d, 0x51, 0xbc, 0x8e, 0x83, 0xfd, 0x1d, 0xa3, 0xe2, 0x3f, 0xd4, 0xb3, 0xd2, 0x6f,
	0x86, 0x54, 0xfc, 0x7c, 0xa0, 0x22, 0xef, 0xf2, 0x48, 0xc3, 0x8b, 0xa3, 0x1a, 0x0e, 0xb9, 0xb6,
	0xb6, 0x03, 0x05, 0xab, 0xe0, 0xca, 0xde, 0xce, 0xde, 0xff, 0x47, 0xbf, 0xab, 0x52, 0xbf, 0x2f,
	0x9f, 0xa7, 0x1f, 0xef, 0xf2, 0x21, 0xf5, 0xfe, 0xad, 0x81, 0x99, 0xa1, 0x75, 0x0d, 0x2f, 0x45,
	0xb2, 0x8c, 0x9f, 0x21, 0xd9, 0x85, 0x78, 0x67, 0xb0, 0xe1, 0x73, 0xbf, 0xd0, 0xce, 0x4a, 0x3f,
	0xd0, 0x06, 0xfa, 0xcd, 0x6d, 0x5b, 0x5c, 0x20, 0x6c, 0x47, 0x93, 0xc4, 0xb3, 0xdf, 0x6e, 0x10,
	0xe1, 0xb9, 0x54, 0x6a, 0x67, 0x4b, 0xa7, 0xc1, 0xa8, 0xc0, 0x16, 0xb5, 0x68, 0x1b, 0x79, 0x0e,
	0x12, 0x0c, 0x15, 0x0b, 0x11, 0x58, 0x47, 0x8f, 0x63, 0x8e, 0x99, 0xc7, 0xc8, 0xc0, 0x14, 0x35,
	0x09, 0xf2, 0x38, 0x31, 0x51, 0x8b, 0xb9, 0xc8, 0xc1, 0x6d, 0x8b, 0xfa, 0x6f, 0x64, 0xfa, 0xd6,
	0x81, 0x6c, 0x40, 0x01, 0xee, 0x82, 0xcb, 0x21, 0x65, 0x44, 0x4e, 0x89, 0xe1, 0x8d, 0xab, 0x7f,
	0x1d, 0xac, 0x64, 0x97, 0x63, 0xd5, 0x8f, 0xb9, 0xb3, 0xa6, 0x0e, 0xae, 0x47, 0x9d, 0xc8, 0x01,
	0x74, 0x5e, 0x27, 0x5c, 0x82, 0x4d, 0xbf, 0x11, 0x8b, 0xf0, 0xd2, 0x39, 0x5d, 0x18, 0xea, 0xc0,
	0xaf, 0x34, 0x30, 0x3b, 0x72, 0xae, 0xc1, 0xc5, 0x48, 0xe6, 0xb8, 0xf3, 0x2e, 0x66, 0x72, 0xff,
	0xa9, 0x9e, 0x95, 0x7e, 0x3e, 0x34, 0xb9, 0xf3, 0x41, 0x9c, 0xbf, 0x1b, 0xa3, 0xb9, 0x85, 0x43,
	0xc6, 0xfe, 0xc0, 0xde, 0x0b, 0x06, 0xb6, 0x04, 0x16, 0xcb, 0xd1, 0x0a, 0x95, 0xa0, 0x8f, 0x34,
	0xac, 0xeb, 0x72, 0x58, 0xf5, 0x77, 0x5d, 0xa3, 0x01, 0xb5, 0x81, 0x72, 0xd9, 0xc4, 0x4b, 0x4d,
	0xd9, 0xfc, 0x5d, 0xf2, 0xac, 0xf4, 0xe3, 0x24, 0x48, 0x14, 0xf5, 0x02, 0xdc, 0x06, 0x33, 0xfd,
	0xfb, 0x28, 0xd5, 0x6b, 0xf0, 0x56, 0xdd, 0x65, 0x27, 0x96, 0x49, 0x38, 0x2a, 0x37, 0x0e, 0x2a,
	0x88, 0x39, 0xc4, 0x0d, 0xde, 0xdc, 0x11, 0xa3, 0x23, 0xe7, 0x86, 0x83, 0x5d, 0x79, 0xe7, 0x9c,
	0x79, 0xae, 0x41, 0xf4, 0xe2, 0xe4, 0x9a, 0x5e, 0xd0, 0x0b, 0x2b, 0xaa, 0x56, 0x4c, 0x63, 0xc7,
	0xb1, 0x2d, 0xc3, 0x8f, 0xca, 0x3f, 0xe1, 0x8c, 0x6e, 0x8c, 0x59, 0x1a, 0x75, 0x90, 0xb8, 0x51,
	0x58, 0x87, 0x35, 0x70, 0x37, 0x18, 0x6e, 0x62, 0xa2, 0x5e, 0x87, 0x04, 0x05, 0x3c, 0x4e, 0x5c,
	0x64, 0x32, 0xc2, 0x11, 0x65, 0x02, 0x75, 0xf0, 0x09, 0x41, 0x0e, 0x71, 0xbb, 0x16, 0xe7, 0x96,
	0xa4, 0xc0, 0x10, 0xf6, 0x55, 0xf6, 0xb1, 0x51, 0xfd, 0xc6, 0x9a, 0xcc, 0x78, 0x03, 0xae, 0x80,
	0xe5, 0xf1, 0x8c, 0x7d, 0x14, 0xb2, 0x82, 0x9c, 0x2d, 0xe6, 0x51, 0x53, 0x6f, 0xdc, 0x01, 0x89,
	0x9b, 0x85, 0x02, 0xfc, 0x3a, 0xf8, 0xda, 0x68, 0x08, 0xa6, 0xc8, 0xa3, 0xe4, 0xd4, 0x21, 0x86,
	0x7c, 0x06, 0x88, 0xeb, 0x32, 0x17, 0x31, 0xc3, 0xf0, 0xe4, 0xc9, 0x19, 0x8a, 0xc0, 0x89, 0x7b,
	0x42, 0x5c, 0xc4, 0x2d, 0x93, 0xe8, 0x8d, 0x23, 0x59, 0xba, 0x00, 0x1f, 0x80, 0xc3, 0xb8, 0xd2,
	0xc1, 0x23, 0xd5, 0x64, 0xe6, 0x33, 0x59, 0xbe, 0x8b, 0xed, 0x16, 0x73, 0xbb, 0x58, 0xc8, 0xd4,
	0x6c, 0xe8, 0x3e, 0xbb, 0x58, 0x18, 0x1d, 0x3f, 0x24, 0xaa, 0x1c, 0xc6, 0xea, 0x8d, 0x6d, 0x59,
	0x40, 0xae, 0xc8, 0xf2, 0xdb, 0x0b, 0x44, 0x89, 0xc2, 0xf5, 0xc0, 0x23, 0x2d, 0xbf, 0xc2, 0xe5,
	0x36, 0x35, 0x09, 0x15, 0x16, 0xb6, 0xb9, 0xfe, 0xe8, 0x27, 0x1a, 0x78, 0xad, 0x45, 0x73, 0xf7,
	0x4a, 0x4b, 0x25, 0xe0, 0xf7, 0xd4, 0x52, 0xa8, 0x29, 0x1b, 0x7a, 0x2f, 0x08, 0x44, 0xe3, 0x92,
	0xb6, 0x4b, 0xb8, 0x70, 0x2d, 0x9f, 0x95, 0x6c, 0x80, 0x27, 0x3a, 0x32, 0x9d, 0xe1, 0xaf, 0x68,
	0x59, 0x83, 0xeb, 0x68, 0xbf, 0x43, 0x86, 0x1d, 0xb2, 0x57, 0x8e, 0xcb, 0xfc, 0xac, 0x2d, 0x66,
	0xdb, 0xac, 0x17, 0x30, 0x92, 0x55, 0x99, 0x6b, 0x7d, 0x27, 0x40, 0x94, 0x99, 0x49, 0x50, 0xcb,
	0x66, 0x3d, 0x7d, 0x79, 0xa2, 0x98, 0x92, 0x43, 0x2d, 0x53, 0x6c, 0x4c, 0xcb, 0x2b, 0xc1, 0x8e,
	0x09, 0xdd, 0x7c, 0x0a, 0x6e, 0xbf, 0xc3, 0x93, 0x01, 0xe7, 0x77, 0x30, 0xc5, 0xed, 0xc1, 0x74,
	0x9a, 0x58, 0x60, 0x70, 0xf3, 0x7f, 0xaf, 0x1d, 0x38, 0x27, 0xbf, 0x26, 0x46, 0xc2, 0xee, 0xa9,
	0x75, 0xe5, 0x51, 0xff, 0xab, 0xf7, 0xbb, 0xaa, 0xf2, 0x52, 0x55, 0x5e, 0xa9, 0xca, 0xaf, 0x55,
	0xe5, 0xaf, 0xaa, 0xf2, 0x46, 0x55, 0xfe, 0xa4, 0x29, 0xcd, 0xa4, 0xff, 0x15, 0xbb, 0xfe, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x8b, 0xd4, 0xa1, 0x4f, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsentServiceClient is the client API for ConsentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsentServiceClient interface {
	// AnswerConsentChallenge sends the answer to the challenge for consnet challenge request
	AnswerConsentChallenge(ctx context.Context, in *AnswerConsentChallengeRequest, opts ...grpc.CallOption) (*Consent, error)
	// CreateConsentEmail creates a new email consent
	CreateConsentEmail(ctx context.Context, in *CreateConsentEmailRequest, opts ...grpc.CallOption) (*Consent, error)
	// CreateConsentSMS creates a new sms consent
	CreateConsentSMS(ctx context.Context, in *CreateConsentSMSRequest, opts ...grpc.CallOption) (*Consent, error)
	// GetConsents returns a list containing up to 20 consents.
	GetConsents(ctx context.Context, in *GetConsentsRequest, opts ...grpc.CallOption) (*GetConsentsResponse, error)
	// RevokeConsent revokes the consent
	RevokeConsent(ctx context.Context, in *RevokeConsentRequest, opts ...grpc.CallOption) (*Consent, error)
}

type consentServiceClient struct {
	cc *grpc.ClientConn
}

func NewConsentServiceClient(cc *grpc.ClientConn) ConsentServiceClient {
	return &consentServiceClient{cc}
}

func (c *consentServiceClient) AnswerConsentChallenge(ctx context.Context, in *AnswerConsentChallengeRequest, opts ...grpc.CallOption) (*Consent, error) {
	out := new(Consent)
	err := c.cc.Invoke(ctx, "/consent.ConsentService/AnswerConsentChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consentServiceClient) CreateConsentEmail(ctx context.Context, in *CreateConsentEmailRequest, opts ...grpc.CallOption) (*Consent, error) {
	out := new(Consent)
	err := c.cc.Invoke(ctx, "/consent.ConsentService/CreateConsentEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consentServiceClient) CreateConsentSMS(ctx context.Context, in *CreateConsentSMSRequest, opts ...grpc.CallOption) (*Consent, error) {
	out := new(Consent)
	err := c.cc.Invoke(ctx, "/consent.ConsentService/CreateConsentSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consentServiceClient) GetConsents(ctx context.Context, in *GetConsentsRequest, opts ...grpc.CallOption) (*GetConsentsResponse, error) {
	out := new(GetConsentsResponse)
	err := c.cc.Invoke(ctx, "/consent.ConsentService/GetConsents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consentServiceClient) RevokeConsent(ctx context.Context, in *RevokeConsentRequest, opts ...grpc.CallOption) (*Consent, error) {
	out := new(Consent)
	err := c.cc.Invoke(ctx, "/consent.ConsentService/RevokeConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsentServiceServer is the server API for ConsentService service.
type ConsentServiceServer interface {
	// AnswerConsentChallenge sends the answer to the challenge for consnet challenge request
	AnswerConsentChallenge(context.Context, *AnswerConsentChallengeRequest) (*Consent, error)
	// CreateConsentEmail creates a new email consent
	CreateConsentEmail(context.Context, *CreateConsentEmailRequest) (*Consent, error)
	// CreateConsentSMS creates a new sms consent
	CreateConsentSMS(context.Context, *CreateConsentSMSRequest) (*Consent, error)
	// GetConsents returns a list containing up to 20 consents.
	GetConsents(context.Context, *GetConsentsRequest) (*GetConsentsResponse, error)
	// RevokeConsent revokes the consent
	RevokeConsent(context.Context, *RevokeConsentRequest) (*Consent, error)
}

// UnimplementedConsentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConsentServiceServer struct {
}

func (*UnimplementedConsentServiceServer) AnswerConsentChallenge(ctx context.Context, req *AnswerConsentChallengeRequest) (*Consent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerConsentChallenge not implemented")
}
func (*UnimplementedConsentServiceServer) CreateConsentEmail(ctx context.Context, req *CreateConsentEmailRequest) (*Consent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsentEmail not implemented")
}
func (*UnimplementedConsentServiceServer) CreateConsentSMS(ctx context.Context, req *CreateConsentSMSRequest) (*Consent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsentSMS not implemented")
}
func (*UnimplementedConsentServiceServer) GetConsents(ctx context.Context, req *GetConsentsRequest) (*GetConsentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsents not implemented")
}
func (*UnimplementedConsentServiceServer) RevokeConsent(ctx context.Context, req *RevokeConsentRequest) (*Consent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeConsent not implemented")
}

func RegisterConsentServiceServer(s *grpc.Server, srv ConsentServiceServer) {
	s.RegisterService(&_ConsentService_serviceDesc, srv)
}

func _ConsentService_AnswerConsentChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerConsentChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentServiceServer).AnswerConsentChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consent.ConsentService/AnswerConsentChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentServiceServer).AnswerConsentChallenge(ctx, req.(*AnswerConsentChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsentService_CreateConsentEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsentEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentServiceServer).CreateConsentEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consent.ConsentService/CreateConsentEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentServiceServer).CreateConsentEmail(ctx, req.(*CreateConsentEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsentService_CreateConsentSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsentSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentServiceServer).CreateConsentSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consent.ConsentService/CreateConsentSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentServiceServer).CreateConsentSMS(ctx, req.(*CreateConsentSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsentService_GetConsents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentServiceServer).GetConsents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consent.ConsentService/GetConsents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentServiceServer).GetConsents(ctx, req.(*GetConsentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsentService_RevokeConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentServiceServer).RevokeConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consent.ConsentService/RevokeConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentServiceServer).RevokeConsent(ctx, req.(*RevokeConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConsentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "consent.ConsentService",
	HandlerType: (*ConsentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnswerConsentChallenge",
			Handler:    _ConsentService_AnswerConsentChallenge_Handler,
		},
		{
			MethodName: "CreateConsentEmail",
			Handler:    _ConsentService_CreateConsentEmail_Handler,
		},
		{
			MethodName: "CreateConsentSMS",
			Handler:    _ConsentService_CreateConsentSMS_Handler,
		},
		{
			MethodName: "GetConsents",
			Handler:    _ConsentService_GetConsents_Handler,
		},
		{
			MethodName: "RevokeConsent",
			Handler:    _ConsentService_RevokeConsent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/openbank/openbank/v1/consent/all.proto",
}
